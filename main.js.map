{"version":3,"file":"main.js","mappings":"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","sources":["webpack://odin-todo/./src/models/projects.js","webpack://odin-todo/./src/models/tasks.js","webpack://odin-todo/./src/storage.js","webpack://odin-todo/./src/utils.js","webpack://odin-todo/./src/views/main.js","webpack://odin-todo/./src/views/sidebar.js","webpack://odin-todo/./src/controller.js","webpack://odin-todo/./src/views/modal.js"],"sourcesContent":["// Projects class\nexport class Project {\n    static EDITABLE_PROPERTIES = ['title', 'description', 'notes', 'tags'];\n    constructor(title, description=\"\", notes=\"\", tags=[], id=null) {\n        this._type = 'project';\n        this.id = id ?? crypto.randomUUID();\n        this.title = title;\n        this.description = description;\n        this.notes = notes;\n        this.tags = tags;\n    }\n\n    updateProject(id, updates) {\n        for (const key in updates) {\n            if (PROJECT_PROPERTIES.includes(key)) {\n                projects[id][key] = updates[key];\n            }\n        }\n    }\n\n    static projectFromJSON(parsedJSONObject) {\n        const project = new Project(parsedJSONObject.title, parsedJSONObject.description,\n            parsedJSONObject.notes, parsedJSONObject.tags, parsedJSONObject.id\n        );\n\n        return project;\n    }\n\n    static retrieveValidProperties() {\n        return this.EDITABLE_PROPERTIES;\n    }\n}\n","// Task class\nexport class Task {\n    static EDITABLE_PROPERTIES = ['project', 'title', 'description', 'dueDate', 'priority', 'checklist', 'notes', 'tags'];\n    constructor(title, description=\"\", dueDate=\"\", priority=0, checklist=[], notes=\"\", tags=[], projectId = 0, id=null) {\n        this._type = \"task\";\n        this.complete = false;\n        this.id = id ?? crypto.randomUUID();\n        this.projectId = projectId;\n        this.title = title;\n        this.description = description;\n        this.dueDate = dueDate;\n        this.priority = priority;\n        this.checklist = checklist;\n        this.notes = notes;\n        this.tags = tags;\n    }\n\n    updateTask(updates) {\n        for (const key in updates) {\n            if (EDITABLE_PROPERTIES.includes(key)) {\n                todos[id][key] = updates[key];\n            }\n        }\n    }\n\n    static taskFromJSON(parsedJSONObject) {\n        const task = new Task(parsedJSONObject.title, parsedJSONObject.description,\n            parsedJSONObject.dueDate, parsedJSONObject.priority, parsedJSONObject.checklist,\n            parsedJSONObject.notes, parsedJSONObject.tags, parsedJSONObject.projectId, parsedJSONObject.id\n        );\n\n        return task;\n    }\n\n    static retrieveValidProperties() {\n        return this.EDITABLE_PROPERTIES;\n    }\n}\n\n","import {Task} from \"./models/tasks.js\";\nimport {Project} from \"./models/projects.js\";\n\nlet projects = [];\nlet tasks = [];\nlet storageAvailable = false;\n\n/* ----------------- Just ensure local storage is available ----------------- */\n\nconst checkStorageAvailable = function(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    storageAvailable = true;\n    return true;\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      e.name === \"QuotaExceededError\" &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/* ---------- Fetch Saved Data When Running App for the First Time ---------- */\n\nexport const initialize = function() {\n    if (checkStorageAvailable(\"localStorage\")) {\n        tasks = getTasks() ?? [];\n        projects = getProjects() ?? [];\n    }\n}\n\n/* - Store New Tasks and Projects Temporarily anprojectId = 0, id=null, fromd then Add to Local Storage - */\n\nexport const addTask = function(task) {\n    tasks.push(task);\n    storeTasks();\n}\n\nexport const addProject = function(project) {\n    projects.push(project);\n    storeProjects();\n}\n\nconst storeTasks = function() {\n    if (storageAvailable) {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n}\n\nconst storeProjects = function() {\n    if (storageAvailable) {\n        localStorage.setItem(\"projects\", JSON.stringify(projects));\n    }\n}\n\nexport const saveActiveProjectId = function(activeProjectId) {\n    if (storageAvailable) {\n        localStorage.setItem(\"active\", activeProjectId);\n    }\n}\n\nexport const getProjects = function() {\n    let projectInformation = JSON.parse(localStorage.getItem(\"projects\"));\n    if (projectInformation) {\n        projectInformation = projectInformation.map((project) => {\n            return Project.projectFromJSON(project);\n        });\n        projects = projectInformation;\n    }\n    return projects;\n}\n\nexport const getTasks = function() {\n    /* This will become an array */\n    let taskInformation = JSON.parse(localStorage.getItem(\"tasks\"));\n    /* Turn them into task objects */\n    if (taskInformation) {\n        taskInformation = taskInformation.map((task) => {\n            return Task.taskFromJSON(task);\n        });\n        tasks = taskInformation;\n    }\n    return tasks;\n}\n\nexport const getStoredActiveProject = function() {\n    console.log(localStorage.getItem(\"active\"));\n    let activeProjectId = localStorage.getItem(\"active\");\n    if (activeProjectId) {\n        const active = projects.find((proj) => {\n            if (proj.id === activeProjectId) {\n                return true;\n            } else {\n                return false;\n            }\n        });\n        return active;\n    } else if (projects.length > 0) {\n        return projects[0];\n    }\n    return null;\n}\n\nexport const getStoredActiveProjectTasks = function() {\n    let tasks = getTasks();\n    let activeTasks = tasks.filter((task) => {\n        if (task.project === getStoredActiveProject()) {\n            return true;\n        }\n        return false;\n    })\n    return activeTasks;\n}\n\n","export const createIcon = (iconName) => {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.classList.add('icon', `icon-${iconName}`);\n  \n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#icon-${iconName}`);\n  \n  svg.appendChild(use);\n  return svg;\n};","// Creates HTML only to be displayed in the main content/active project area\n\nimport {createIcon} from \"../utils.js\";\n\nconst todoList = document.querySelector(\".todo-list\");\nconst projectContainer = document.querySelector(\".project-container\");\n\nconst renderTask = function (addedTask) {\n    let task = document.createElement('li');\n    task.setAttribute(\"data-id\", addedTask.projectId);\n    task.classList.add('task');\n    let titleNode = document.createElement('h3');\n    titleNode.textContent = addedTask.title;\n\n    const circleCheck = document.createElement(\"div\");\n    circleCheck.classList.add(\"icon-circle-with-check\");\n    circleCheck.innerHTML = `<svg class=\"icon icon-circle-with-check\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n        <path d=\"M16 26.667c-5.891 0-10.667-4.776-10.667-10.667v0c0-5.891 4.776-10.667 10.667-10.667v0c5.891 0 10.667 4.776 10.667 10.667v0c0 5.891-4.776 10.667-10.667 10.667v0zM16 2.667c-7.364 0-13.333 5.97-13.333 13.333v0c0 7.364 5.97 13.333 13.333 13.333v0c7.364 0 13.333-5.97 13.333-13.333v0c0-7.364-5.97-13.333-13.333-13.333v0z\"></path>\n        <path class=\"inner-check\" d=\"M23 11.333l-8 8-3.667-3.667 0.94-0.94 2.727 2.72 7.06-7.053 0.94 0.94z\"></path>\n      </svg>`;\n\n    const leftSide = document.createElement('div');\n\n    leftSide.appendChild(circleCheck);\n    leftSide.appendChild(titleNode);\n    leftSide.classList.add(\"task-info\");\n\n    const rightSide = document.createElement('div');\n    const edit = createIcon(\"pencil\");\n    const trash = createIcon(\"trash-can-outline\");\n\n    rightSide.appendChild(edit);\n    rightSide.appendChild(trash);\n    rightSide.classList.add(\"task-utils\");\n    \n    task.appendChild(leftSide);\n    task.appendChild(rightSide);\n    todoList.appendChild(task);\n}\n\nexport const populateTodoListView = function(tasks) {\n    todoList.innerHTML = ''; \n    for (let task of tasks) {\n        renderTask(task);\n    }\n}\n\nexport const renderProject = function (addedProject) {\n    projectContainer.innerHTML = \"\";\n    projectContainer.setAttribute(\"data-id\", addedProject.id);\n\n    const titleNode = document.createElement('h3');\n    titleNode.textContent = addedProject.title;\n\n    const icon = createIcon(\"icon-circle-outline\");\n\n    projectContainer.appendChild(icon);\n    projectContainer.appendChild(titleNode);\n}\n\nexport const clearMainContent = function() {\n    todoList.innerHTML = \"\";\n    projectContainer.innerHTML = \"\";\n}\n\nexport const setHeader = function(text) {\n    const titleNode = document.createElement('h3');\n    titleNode.textContent = text;\n    projectContainer.appendChild(titleNode);\n}","import {createIcon} from \"../utils.js\";\n\nconst sidebarList = document.querySelector(\".sidebar-project-list\");\n\nexport const renderProjectSidebarView = (projects) => {\n    sidebarList.innerHTML = '';\n    projects.forEach(proj => {\n        const tabContainer = document.createElement('li');\n        tabContainer.dataset.projectId = proj.id;\n        tabContainer.classList.add(\"project-tab\");\n        const icon = createIcon(\"icon-circle-outline\");\n\n        const titleNode = document.createElement('h3');\n        titleNode.textContent = proj.title;\n        tabContainer.appendChild(icon);\n        tabContainer.appendChild(titleNode);\n\n        sidebarList.appendChild(tabContainer);\n    });\n};\n\nexport const getProjectListElementContainer = function() {\n  return sidebarList;\n}\n\nexport const setActiveProject = (projectId) => {\n  const active = document.querySelector(`data-${projectId}`);\n  active.classList.add(\"active-project\");\n};\n\nexport const setInactiveProject = (projectId) => {\n  const inactive = document.querySelector(`data-${projectId}`);\n  inactive.classList.remove(\"active-project\");\n}\n\nexport const removeProject = (projectId) => {\n  const removed = document.querySelector(`data-${projectId}`);\n  sidebarList.removeChild(removed);\n};","// All real logic contained in this module.\n// This module uses the others to get its work done.\nimport {Project} from \"./models/projects.js\";\nimport {Task} from \"./models/tasks.js\";\nimport * as storage from \"./storage.js\";\n\nimport * as mainView from \"./views/main.js\";\nimport * as editModalView from \"./views/modal.js\";\nimport * as sidebarView from \"./views/sidebar.js\";\n\nlet activeProject;\n\n// Inject all Handlers and Load All User Info\nexport const initializeApp = function () {\n    storage.initialize();\n    attachSidebarHandlers();\n    attachFormButtonHandlers();\n    attachProjectListTabsHandler();\n    displayActiveProject();\n}\n\n/* -------------------------- Default Project Setup ------------------------- */\n\nconst createDefaultProject = function() {\n    const defaultProject = new Project('Default', '', '', '');\n    return defaultProject;\n}\n\n// Remember the User's Last Active Project and Render It\n\nconst displayActiveProject = function() {\n    if (storage.getProjects().length === 0) {\n        const defProject = createDefaultProject();\n        activeProject = defProject;\n        storage.saveActiveProjectId(defProject.id);\n    } else if (!activeProject) {\n        activeProject = storage.getStoredActiveProject();\n    }\n    sidebarView.renderProjectSidebarView(storage.getProjects());\n    mainView.renderProject(activeProject);\n    mainView.populateTodoListView(getRelevantTasks(activeProject.id));\n}\n\n/* ----------------------- Sidebar EventHandler Setup ----------------------- */\n\n// Add Event Listeners to Every Sidebar Button\nconst attachSidebarHandlers = function() {\n    const projectCreationDialog = document.querySelector(\"#project-dialog\");\n    const taskDialog = document.querySelector(\"#task-dialog\");\n    const editDialog = document.querySelector(\"#edit-modal\");\n    const sidebarTopButtonsContainer = document.querySelector(\".sidebar-top\");\n    sidebarTopButtonsContainer.addEventListener('click', (e) => {\n        if (e.target.matches(\".add-task\")) {\n            const projects = storage.getProjects();\n            const projectSelector = taskDialog.querySelector(\"#project-select\");\n            projectSelector.innerHTML = \"\";\n            projects.forEach((project) => {\n                const option = editModalView.createLinkedOptionElement(project.title, project.id);\n                projectSelector.appendChild(option);\n            })\n            taskDialog.showModal();\n        } else if (e.target.matches(\".view-all\")) {\n            const tasks = storage.getTasks();\n            mainView.clearMainContent();\n            mainView.setHeader(\"All Tasks\");\n            mainView.populateTodoListView(tasks);\n        }else if (e.target.matches(\".calendar-today\")) {\n            taskDialog.showModal();\n        } else if (e.target.matches(\".calendar-week\")) {\n            taskDialog.showModal();\n        } else if (e.target.matches(\".calendar-month\")) {\n            taskDialog.showModal();\n        }\n    })\n\n    const addProjectButton = document.querySelector(\".add-project\");\n    addProjectButton.addEventListener('click', () => {\n        projectCreationDialog.showModal();\n    })\n}\n\n// Add Proper Close and Save Handlers to Every Form in the HTML\nconst attachFormButtonHandlers = function() {\n    const forms = document.querySelectorAll(\"form\");\n    forms.forEach((form) => {\n        if (form.parentElement.matches(\"#project-dialog\")) {\n            addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleProjectSubmission(Object.fromEntries(new FormData(form))));\n        } else if (form.parentElement.matches(\"#task-dialog\")) {\n            addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleTaskSubmission(Object.fromEntries(new FormData(form))));\n        } else if (form.parentElement.matches(\"#edit-modal\")) {\n                        addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleProjectSubmission(Object.fromEntries(new FormData(form))));\n        }\n    })\n}\n\n// Add Given Functions to the Cancel and Submit Buttons\n\nconst addFormButtonHandlers = function(form, closeCallBack, submitCallback) {\n    const closeButton = form.querySelector(\".cancel-btn\");\n    const submitButton = form.querySelector(\".save-btn\");\n    closeButton.addEventListener(\"click\", () => {\n        closeCallBack();\n    })\n    submitButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        submitCallback();\n        closeCallBack();\n    })\n}\n\n// Setup Event Handler for Entire List of Projects, so User Can Choose\n// Their Desired Active Project\n\nconst attachProjectListTabsHandler = function() {\n    sidebarView.getProjectListElementContainer().addEventListener(\"click\",\n        (e) => {\n            if (e.target.matches(\".project-tab\")) {\n                const id = e.target.dataset.projectId;\n                const project = storage.getProjects().find((proj) => proj.id === id);\n                mainView.renderProject(project);\n                storage.saveActiveProjectId(project.id);\n                mainView.populateTodoListView(getRelevantTasks(project.id));\n            }\n        }\n    )\n}\n\n/* ------------------- Add Task/Project Callback Functions ------------------ */\n\n//Pretty self-explanatory, but creates and saves projects, renders if necessary\nconst handleProjectSubmission = function(data) {\n    const projectRequest = new Project(data.title, data.description,\n        data.notes, data.tags);\n    storage.addProject(projectRequest);\n    mainView.renderProject(projectRequest);\n    sidebarView.renderProjectSidebarView(storage.getProjects());\n}\n\nconst handleTaskSubmission = function(data) {\n    const taskRequest = new Task(data.title,\n    data.description, data.dueDate, data.priority,\n    data.checkList, data.notes, data.tags, data.projectId);\n    storage.addTask(taskRequest);\n}\n\n/* ------------------------- Active Project Methods ------------------------- */\n\nconst setActiveProject = function(project) {\n    activeProject = project;\n    storage.saveActiveProjectId(project);\n}\n\nconst getActiveProject = function() {\n    if (activeProject == null || activeProject == undefined) {\n        return storage.getStoredActiveProject();\n    } \n    return activeProject;\n}\n\n/* ---------------------------------- Misc ---------------------------------- */\n\nconst getRelevantTasks = function(projectId) {\n    const associatedTasks = storage.getTasks().filter(\n        (task) => {\n        return task.projectId === projectId;})\n\n    return associatedTasks;\n}","export const showModal = function (modalID) {\n    const modalDialog = document.querySelector(`#${modalID}`);\n    modalDialog.showModal();\n}\n\nexport const showEditModal = function(item, editableFields) {\n    const modal = document.querySelector('#edit-modal');\n    const fieldsContainer = document.querySelector('#modal-fields');\n  \n    fieldsContainer.innerHTML = '';\n  \n    editableFields.forEach(field => {\n        fieldsContainer.appendChild(createFieldElement(field, item[field]));\n    });\n  \n    modal.showModal();\n    return modal;\n}\n\nconst createFieldElement = function(fieldName, value) {\n  const container = document.createElement('div');\n  container.className = 'field-group';\n  \n  const label = document.createElement('label');\n  label.textContent = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);\n  label.htmlFor = fieldName;\n  \n  const input = document.createElement('input');\n  input.id = fieldName;\n  input.name = fieldName;\n  input.value = value || '';\n  \n  container.append(label, input);\n  return container;\n}\n\nexport const createLinkedOptionElement = function(text, id) {\n    const option = document.createElement(\"option\");\n    option.value = id;\n    option.textContent = text;\n    return option;\n    \n}\n\n"],"names":["Project","static","constructor","title","description","notes","tags","id","this","_type","crypto","randomUUID","updateProject","updates","key","PROJECT_PROPERTIES","includes","projects","projectFromJSON","parsedJSONObject","retrieveValidProperties","EDITABLE_PROPERTIES","Task","dueDate","priority","checklist","projectId","complete","updateTask","todos","taskFromJSON","tasks","storageAvailable","saveActiveProjectId","activeProjectId","localStorage","setItem","getProjects","projectInformation","JSON","parse","getItem","map","project","getTasks","taskInformation","task","createIcon","iconName","svg","document","createElementNS","classList","add","use","setAttributeNS","appendChild","todoList","querySelector","projectContainer","renderTask","addedTask","createElement","setAttribute","titleNode","textContent","circleCheck","innerHTML","leftSide","rightSide","edit","trash","populateTodoListView","renderProject","addedProject","icon","sidebarList","renderProjectSidebarView","forEach","proj","tabContainer","dataset","activeProject","addFormButtonHandlers","form","closeCallBack","submitCallback","closeButton","submitButton","addEventListener","e","preventDefault","handleProjectSubmission","data","projectRequest","push","stringify","handleTaskSubmission","checkList","getRelevantTasks","filter","storage","window","x","removeItem","DOMException","name","length","checkStorageAvailable","projectCreationDialog","taskDialog","target","matches","projectSelector","option","text","value","showModal","attachSidebarHandlers","querySelectorAll","parentElement","close","Object","fromEntries","FormData","find","defProject","console","log","displayActiveProject"],"sourceRoot":""}