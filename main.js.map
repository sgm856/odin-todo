{"version":3,"file":"main.js","mappings":"mBACO,MAAMA,EACTC,2BAA6B,CAAC,QAAS,cAAe,QAAS,QAC/D,WAAAC,CAAYC,EAAOC,EAAY,GAAIC,EAAM,GAAIC,EAAK,GAAIC,EAAG,MACrDC,KAAKC,MAAQ,UACbD,KAAKD,GAAKA,GAAMG,OAAOC,aACvBH,KAAKL,MAAQA,EACbK,KAAKJ,YAAcA,EACnBI,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,CAChB,CAEA,aAAAM,CAAcC,GACVC,QAAQC,IAAIF,GACZ,IAAK,MAAMG,KAAOH,EACVb,EAAQiB,oBAAoBC,SAASF,KACrCR,KAAKQ,GAAOH,EAAQG,GAGhC,CAEA,sBAAOG,CAAgBC,GAKnB,OAJgB,IAAIpB,EAAQoB,EAAiBjB,MAAOiB,EAAiBhB,YACjEgB,EAAiBf,MAAOe,EAAiBd,KAAMc,EAAiBb,GAIxE,CAEA,8BAAOc,GACH,OAAOb,KAAKS,mBAChB,EC9BG,MAAMK,EACTrB,2BAA6B,CAAC,UAAW,QAAS,cAAe,UAAW,WAAY,YAAa,QAAS,QAC9G,WAAAC,CAAYC,EAAOC,EAAY,GAAImB,EAAQ,GAAIC,EAAS,EAAGC,EAAU,GAAIpB,EAAM,GAAIC,EAAK,GAAIoB,EAAY,EAAGnB,EAAG,MAC1GC,KAAKC,MAAQ,OACbD,KAAKmB,UAAW,EAChBnB,KAAKD,GAAKA,GAAMG,OAAOC,aACvBH,KAAKkB,UAAYA,EACjBlB,KAAKL,MAAQA,EACbK,KAAKJ,YAAcA,EACnBI,KAAKe,QAAUA,EACff,KAAKgB,SAAWA,EAChBhB,KAAKiB,UAAYA,EACjBjB,KAAKH,MAAQA,EACbG,KAAKF,KAAOA,CAChB,CAEA,UAAAsB,CAAWf,GACP,IAAK,MAAMG,KAAOH,EACdC,QAAQC,IAAIF,GACRS,EAAKL,oBAAoBC,SAASF,KAClCR,KAAKQ,GAAOH,EAAQG,GAGhC,CAEA,mBAAOa,CAAaT,GAMhB,OALa,IAAIE,EAAKF,EAAiBjB,MAAOiB,EAAiBhB,YAC3DgB,EAAiBG,QAASH,EAAiBI,SAAUJ,EAAiBK,UACtEL,EAAiBf,MAAOe,EAAiBd,KAAMc,EAAiBM,UAAWN,EAAiBb,GAIpG,CAEA,8BAAOc,GACH,OAAOb,KAAKS,mBAChB,ECjCJ,IAAIa,EAAW,GACXC,EAAQ,GACRC,GAAmB,EAIvB,MAoCaC,EAAa,SAASC,GAC/BJ,EAASK,KAAKD,GACdE,GACJ,EAcMC,EAAa,WACXL,GACAM,aAAaC,QAAQ,QAASC,KAAKC,UAAUV,GAErD,EAEMK,EAAgB,WACdJ,GACAM,aAAaC,QAAQ,WAAYC,KAAKC,UAAUX,GAExD,EAEaY,EAAsB,SAASC,GACpCX,GACAM,aAAaC,QAAQ,SAAUI,EAEvC,EAEaC,EAAc,WACvB,IAAIC,EAAqBL,KAAKM,MAAMR,aAAaS,QAAQ,aAOzD,OANIF,IACAA,EAAqBA,EAAmBG,OAAOC,GAAiB,OAATA,GAAeC,IAAKhB,GAChElC,EAAQmB,gBAAgBe,IAEnCJ,EAAWe,GAERf,CACX,EAEaqB,EAAW,WAEpB,IAAIC,EAAkBZ,KAAKM,MAAMR,aAAaS,QAAQ,UAQtD,OANIK,IACAA,EAAkBA,EAAgBJ,OAAOK,GAAiB,OAATA,GAAeH,IAAKG,GAC1D/B,EAAKO,aAAawB,IAE7BtB,EAAQqB,GAELrB,CACX,ECvGauB,EAAcC,IACzB,MAAMC,EAAMC,SAASC,gBAAgB,6BAA8B,OACnEF,EAAIG,UAAUC,IAAI,OAAQ,QAAQL,KAElC,MAAMM,EAAMJ,SAASC,gBAAgB,6BAA8B,OAInE,OAHAG,EAAIC,eAAe,+BAAgC,aAAc,SAASP,KAE1EC,EAAIO,YAAYF,GACTL,GCJHQ,EAAWP,SAASQ,cAAc,cAClCC,EAAmBT,SAASQ,cAAc,sBAE1CE,EAAa,SAAUC,GACzB,IAAIf,EAAOI,SAASY,cAAc,MAClChB,EAAKiB,aAAa,UAAWF,EAAU7D,IACvC8C,EAAKiB,aAAa,kBAAmBF,EAAU1C,WAC/C2B,EAAKM,UAAUC,IAAI,QACnB,IAAIW,EAAYd,SAASY,cAAc,MACvCE,EAAUC,YAAcJ,EAAUjE,MAElC,MAAMsE,EAAoBhB,SAASY,cAAc,UACjDI,EAAkBd,UAAUC,IAAI,0BAChCa,EAAkBd,UAAUC,IAAI,eAChCa,EAAkBd,UAAUC,IAAI,wBAChCa,EAAkBC,UAAY,sjBAK9B,MAAMC,EAAWlB,SAASY,cAAc,OAExCM,EAASZ,YAAYU,GACrBE,EAASZ,YAAYQ,GACrBI,EAAShB,UAAUC,IAAI,aAEvB,MAAMgB,EAAYnB,SAASY,cAAc,OACnCQ,EAAapB,SAASY,cAAc,UACpCS,EAAcrB,SAASY,cAAc,UAE3CQ,EAAWlB,UAAUC,IAAI,eACzBiB,EAAWlB,UAAUC,IAAI,oBACzBkB,EAAYnB,UAAUC,IAAI,eAC1BkB,EAAYnB,UAAUC,IAAI,qBAC1B,MAAMmB,EAAUzB,EAAW,UACrB0B,EAAW1B,EAAW,qBACtB/B,EAAUkC,SAASY,cAAc,KACvC9C,EAAQoC,UAAUC,IAAI,YACtBrC,EAAQiD,YAAcJ,EAAU7C,QAEhCsD,EAAWd,YAAYgB,GACvBD,EAAYf,YAAYiB,GAExBJ,EAAUb,YAAYxC,GACtBqD,EAAUb,YAAYc,GACtBD,EAAUb,YAAYe,GACtBF,EAAUjB,UAAUC,IAAI,cAExBP,EAAKU,YAAYY,GACjBtB,EAAKU,YAAYa,GACjBZ,EAASD,YAAYV,EACzB,EAEa4B,EAAuB,SAASlD,GACzCiC,EAASU,UAAY,GACrB,IAAK,IAAIrB,KAAQtB,EACboC,EAAWd,EAEnB,EAEa6B,EAAgB,SAAUC,GACnCjB,EAAiBQ,UAAY,GAC7BR,EAAiBI,aAAa,UAAWa,EAAa5E,IAEtD,MAAMgE,EAAYd,SAASY,cAAc,MACzCE,EAAUC,YAAcW,EAAahF,MAErC,MAAMiF,EAAO9B,EAAW,uBAExBY,EAAiBH,YAAYqB,GAC7BlB,EAAiBH,YAAYQ,EACjC,EAEac,EAAmB,WAC5BrB,EAASU,UAAY,GACrBR,EAAiBQ,UAAY,EACjC,EAEaY,EAAY,SAASC,GAC9B,MAAMhB,EAAYd,SAASY,cAAc,MACzCE,EAAUC,YAAce,EACxBrB,EAAiBH,YAAYQ,EACjC,ECtFaiB,EAAwB/B,SAASQ,cAAc,mBAC/CwB,EAAqBhC,SAASQ,cAAc,gBAC5CyB,EAAsBjC,SAASQ,cAAc,wBAC7C0B,EAAmBlC,SAASQ,cAAc,qBA2C1C2B,EAAgC,SAASC,EAAaC,GAC/D,IAAK,MAAM9E,KAAO8E,EACVD,EAAYE,SAAS/E,KACrB6E,EAAYE,SAAS/E,GAAKgF,MAAQF,EAAgB9E,GAG9D,EClDMiF,EAAcxC,SAASQ,cAAc,yBAE9BiC,EAA4BpE,IACrCmE,EAAYvB,UAAY,GACxB5C,EAASqE,QAAQlD,IACb,MAAMmD,EAAe3C,SAASY,cAAc,MAC5C+B,EAAaC,QAAQ3E,UAAYuB,EAAK1C,GACtC6F,EAAazC,UAAUC,IAAI,eAC3B,MAAMwB,EAAO9B,EAAW,wBAElBiB,EAAYd,SAASY,cAAc,MACzCE,EAAUC,YAAcvB,EAAK9C,MAE7B,MAAMwE,EAAWlB,SAASY,cAAc,OACxCM,EAASZ,YAAYqB,GACrBT,EAASZ,YAAYQ,GACrBI,EAAShB,UAAUC,IAAI,oBAEvB,MAAMgB,EAAYnB,SAASY,cAAc,OACnCiC,EAAS7C,SAASY,cAAc,UACtCiC,EAAO3C,UAAUC,IAAI,eACrB0C,EAAO3C,UAAUC,IAAI,2BAErB,MAAM2C,EAAWjD,EAAW,UAC5BgD,EAAOvC,YAAYwC,GACnB3B,EAAUb,YAAYuC,GACtB1B,EAAUjB,UAAUC,IAAI,qBAExBwC,EAAarC,YAAYY,GACzByB,EAAarC,YAAYa,GAEzBqB,EAAYlC,YAAYqC,MCjC1BI,EAAuB,CAC3BC,iBAAkB,CAChBC,IAAK,qBACLC,MAAO,+BAGTC,SAAU,CACRF,IAAK,WACLC,MAAO,qBAGTE,YAAa,gBAEbC,iBAAkB,CAChBJ,IAAK,qBACLC,MAAO,+BAGTI,SAAU,CACRL,IAAK,WACLC,MAAO,qBAGTK,YAAa,CACXN,IAAK,eACLC,MAAO,yBAGTM,OAAQ,CACNP,IAAK,SACLC,MAAO,mBAGTO,MAAO,CACLR,IAAK,QACLC,MAAO,kBAGTQ,YAAa,CACXT,IAAK,eACLC,MAAO,yBAGTS,OAAQ,CACNV,IAAK,SACLC,MAAO,mBAGTU,aAAc,CACZX,IAAK,gBACLC,MAAO,0BAGTW,QAAS,CACPZ,IAAK,UACLC,MAAO,oBAGTY,YAAa,CACXb,IAAK,eACLC,MAAO,yBAGTa,OAAQ,CACNd,IAAK,SACLC,MAAO,mBAGTc,WAAY,CACVf,IAAK,cACLC,MAAO,wBAGTe,aAAc,CACZhB,IAAK,gBACLC,MAAO,2BC3EJ,SAASgB,EAAkBC,GAChC,MAAO,CAACC,EAAU,CAAC,KAEjB,MAAMC,EAAQD,EAAQC,MAAQC,OAAOF,EAAQC,OAASF,EAAKI,aAE3D,OADeJ,EAAKK,QAAQH,IAAUF,EAAKK,QAAQL,EAAKI,cAG5D,CCLA,MAqBaE,EAAa,CACxBC,KAAMR,EAAkB,CACtBM,QAvBgB,CAClBG,KAAM,mBACNC,KAAM,aACNC,OAAQ,WACRC,MAAO,cAoBLP,aAAc,SAGhBQ,KAAMb,EAAkB,CACtBM,QArBgB,CAClBG,KAAM,iBACNC,KAAM,cACNC,OAAQ,YACRC,MAAO,UAkBLP,aAAc,SAGhBS,SAAUd,EAAkB,CAC1BM,QAnBoB,CACtBG,KAAM,yBACNC,KAAM,yBACNC,OAAQ,qBACRC,MAAO,sBAgBLP,aAAc,UCpCZU,EAAuB,CAC3BC,SAAU,qBACVC,UAAW,mBACXC,MAAO,eACPC,SAAU,kBACVC,SAAU,cACVpC,MAAO,KCiCF,SAASqC,EAAgBpB,GAC9B,MAAO,CAAC5B,EAAO6B,KAGb,IAAIoB,EACJ,GAAgB,gBAHApB,GAASqB,QAAUnB,OAAOF,EAAQqB,SAAW,eAG7BtB,EAAKuB,iBAAkB,CACrD,MAAMnB,EAAeJ,EAAKwB,wBAA0BxB,EAAKI,aACnDF,EAAQD,GAASC,MAAQC,OAAOF,EAAQC,OAASE,EAEvDiB,EACErB,EAAKuB,iBAAiBrB,IAAUF,EAAKuB,iBAAiBnB,EAC1D,KAAO,CACL,MAAMA,EAAeJ,EAAKI,aACpBF,EAAQD,GAASC,MAAQC,OAAOF,EAAQC,OAASF,EAAKI,aAE5DiB,EAAcrB,EAAKyB,OAAOvB,IAAUF,EAAKyB,OAAOrB,EAClD,CAIA,OAAOiB,EAHOrB,EAAK0B,iBAAmB1B,EAAK0B,iBAAiBtD,GAASA,GAKzE,CC7DO,SAASuD,EAAa3B,GAC3B,MAAO,CAAC4B,EAAQ3B,EAAU,CAAC,KACzB,MAAMC,EAAQD,EAAQC,MAEhB2B,EACH3B,GAASF,EAAK8B,cAAc5B,IAC7BF,EAAK8B,cAAc9B,EAAK+B,mBACpBC,EAAcJ,EAAOK,MAAMJ,GAEjC,IAAKG,EACH,OAAO,KAET,MAAME,EAAgBF,EAAY,GAE5BG,EACHjC,GAASF,EAAKmC,cAAcjC,IAC7BF,EAAKmC,cAAcnC,EAAKoC,mBAEpBhJ,EAAMiJ,MAAMC,QAAQH,GA+B9B,SAAmBI,EAAOC,GACxB,IAAK,IAAIpJ,EAAM,EAAGA,EAAMmJ,EAAME,OAAQrJ,IACpC,GAAIoJ,EAAUD,EAAMnJ,IAClB,OAAOA,CAIb,CArCQsJ,CAAUP,EAAgBQ,GAAYA,EAAQC,KAAKV,IAkB3D,SAAiBW,EAAQL,GACvB,IAAK,MAAMpJ,KAAOyJ,EAChB,GACEC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAQzJ,IAC7CoJ,EAAUK,EAAOzJ,IAEjB,OAAOA,CAIb,CA1BQ8J,CAAQf,EAAgBQ,GAAYA,EAAQC,KAAKV,IAErD,IAAI9D,EAUJ,OARAA,EAAQ4B,EAAKmD,cAAgBnD,EAAKmD,cAAc/J,GAAOA,EACvDgF,EAAQ6B,EAAQkD,cAEZlD,EAAQkD,cAAc/E,GACtBA,EAIG,CAAEA,QAAOgF,KAFHxB,EAAOyB,MAAMnB,EAAcO,SAI5C,CCnCO,IAA6BzC,ECc7B,MAAMsD,EAAO,CAClBC,KAAM,QACNC,eP+D4B,CAACC,EAAOC,EAAOzD,KAC3C,IAAI0D,EAEJ,MAAMC,EAAahF,EAAqB6E,GASxC,OAPEE,EADwB,iBAAfC,EACAA,EACU,IAAVF,EACAE,EAAW9E,IAEX8E,EAAW7E,MAAM8E,QAAQ,YAAaH,EAAMI,YAGnD7D,GAAS8D,UACP9D,EAAQ+D,YAAc/D,EAAQ+D,WAAa,EACtC,MAAQL,EAERA,EAAS,OAIbA,GOlFPrD,WAAYA,EACZ2D,eJT4B,CAACR,EAAOS,EAAOC,EAAWC,IACtDtD,EAAqB2C,GISrBY,SCyIsB,CACtBC,cAzBoB,CAACC,EAAaH,KAClC,MAAMI,EAASC,OAAOF,GAShBG,EAASF,EAAS,IACxB,GAAIE,EAAS,IAAMA,EAAS,GAC1B,OAAQA,EAAS,IACf,KAAK,EACH,OAAOF,EAAS,KAClB,KAAK,EACH,OAAOA,EAAS,KAClB,KAAK,EACH,OAAOA,EAAS,KAGtB,OAAOA,EAAS,MAMhBG,IAAKvD,EAAgB,CACnBK,OA9Jc,CAChBmD,OAAQ,CAAC,IAAK,KACdC,YAAa,CAAC,KAAM,MACpBC,KAAM,CAAC,gBAAiB,gBA4JtB1E,aAAc,SAGhB2E,QAAS3D,EAAgB,CACvBK,OA7JkB,CACpBmD,OAAQ,CAAC,IAAK,IAAK,IAAK,KACxBC,YAAa,CAAC,KAAM,KAAM,KAAM,MAChCC,KAAM,CAAC,cAAe,cAAe,cAAe,gBA2JlD1E,aAAc,OACdsB,iBAAmBqD,GAAYA,EAAU,IAG3CC,MAAO5D,EAAgB,CACrBK,OAzJgB,CAClBmD,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChEC,YAAa,CACX,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGFC,KAAM,CACJ,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,aA6HA1E,aAAc,SAGhB6E,IAAK7D,EAAgB,CACnBK,OA7Hc,CAChBmD,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCjE,MAAO,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC5CkE,YAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACxDC,KAAM,CACJ,SACA,SACA,UACA,YACA,WACA,SACA,aAmHA1E,aAAc,SAGhB8E,UAAW9D,EAAgB,CACzBK,OAnHoB,CACtBmD,OAAQ,CACNO,GAAI,IACJC,GAAI,IACJC,SAAU,KACVC,KAAM,IACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,SAETb,YAAa,CACXM,GAAI,KACJC,GAAI,KACJC,SAAU,WACVC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,SAETZ,KAAM,CACJK,GAAI,OACJC,GAAI,OACJC,SAAU,WACVC,KAAM,OACNC,QAAS,UACTC,UAAW,YACXC,QAAS,UACTC,MAAO,UAuFPtF,aAAc,OACdmB,iBApF8B,CAChCqD,OAAQ,CACNO,GAAI,IACJC,GAAI,IACJC,SAAU,KACVC,KAAM,IACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,YAETb,YAAa,CACXM,GAAI,KACJC,GAAI,KACJC,SAAU,WACVC,KAAM,OACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,YAETZ,KAAM,CACJK,GAAI,OACJC,GAAI,OACJC,SAAU,WACVC,KAAM,OACNC,QAAS,iBACTC,UAAW,mBACXC,QAAS,iBACTC,MAAO,aAwDPlE,uBAAwB,UDpK1BS,MEqEmB,CACnBqC,eH1FkCtE,EG0FC,CACjC6B,aAxF8B,wBAyF9B8D,aAxF8B,OAyF9BxC,cAAgB/E,GAAUwH,SAASxH,EAAO,KH5FrC,CAACwD,EAAQ3B,EAAU,CAAC,KACzB,MAAM+B,EAAcJ,EAAOK,MAAMjC,EAAK6B,cACtC,IAAKG,EAAa,OAAO,KACzB,MAAME,EAAgBF,EAAY,GAE5B6D,EAAcjE,EAAOK,MAAMjC,EAAK2F,cACtC,IAAKE,EAAa,OAAO,KACzB,IAAIzH,EAAQ4B,EAAKmD,cACbnD,EAAKmD,cAAc0C,EAAY,IAC/BA,EAAY,GAOhB,OAJAzH,EAAQ6B,EAAQkD,cAAgBlD,EAAQkD,cAAc/E,GAASA,EAIxD,CAAEA,QAAOgF,KAFHxB,EAAOyB,MAAMnB,EAAcO,WGiF1CkC,IAAKhD,EAAa,CAChBG,cA3FqB,CACvB8C,OAAQ,UACRC,YAAa,6DACbC,KAAM,8DAyFJ/C,kBAAmB,OACnBI,cAxFqB,CACvB2D,IAAK,CAAC,MAAO,YAwFX1D,kBAAmB,QAGrB2C,QAASpD,EAAa,CACpBG,cAzFyB,CAC3B8C,OAAQ,WACRC,YAAa,YACbC,KAAM,kCAuFJ/C,kBAAmB,OACnBI,cAtFyB,CAC3B2D,IAAK,CAAC,KAAM,KAAM,KAAM,OAsFtB1D,kBAAmB,MACnBe,cAAgB4C,GAAUA,EAAQ,IAGpCf,MAAOrD,EAAa,CAClBG,cAxFuB,CACzB8C,OAAQ,eACRC,YAAa,sDACbC,KAAM,6FAsFJ/C,kBAAmB,OACnBI,cArFuB,CACzByC,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGFkB,IAAK,CACH,OACA,MACA,QACA,OACA,QACA,QACA,QACA,OACA,MACA,MACA,MACA,QA0DA1D,kBAAmB,QAGrB6C,IAAKtD,EAAa,CAChBG,cA1DqB,CACvB8C,OAAQ,YACRjE,MAAO,2BACPkE,YAAa,kCACbC,KAAM,gEAuDJ/C,kBAAmB,OACnBI,cAtDqB,CACvByC,OAAQ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnDkB,IAAK,CAAC,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,SAqDjD1D,kBAAmB,QAGrB8C,UAAWvD,EAAa,CACtBG,cAtD2B,CAC7B8C,OAAQ,6DACRkB,IAAK,kFAqDH/D,kBAAmB,MACnBI,cApD2B,CAC7B2D,IAAK,CACHX,GAAI,MACJC,GAAI,MACJC,SAAU,OACVC,KAAM,OACNC,QAAS,WACTC,UAAW,aACXC,QAAS,WACTC,MAAO,WA4CPtD,kBAAmB,SF5GrBnC,QAAS,CACP+F,aAAc,EACdC,sBAAuB,IGvB3B,IAAIC,EAAiB,CAAC,EAEf,SAASC,IACd,OAAOD,CACT,CCiDuBE,KAAKC,IAAI,GAAI,GA/B7B,MAsDMC,EAAqB,OA2IrBC,EAAsBC,OAAOC,IAAI,qBClLvC,SAASC,EAAcnG,EAAMnC,GAClC,MAAoB,mBAATmC,EAA4BA,EAAKnC,GAExCmC,GAAwB,iBAATA,GAAqBgG,KAAuBhG,EACtDA,EAAKgG,GAAqBnI,GAE/BmC,aAAgBoG,KAAa,IAAIpG,EAAKjI,YAAY8F,GAE/C,IAAIuI,KAAKvI,EAClB,CCNO,SAASwI,EAAOC,EAAUvF,GAE/B,OAAOoF,EAAcpF,GAAWuF,EAAUA,EAC5C,CC9BO,SAASC,EAAgCvG,GAC9C,MAAM2D,EAAQ0C,EAAOrG,GACfwG,EAAU,IAAIJ,KAClBA,KAAKK,IACH9C,EAAM+C,cACN/C,EAAMgD,WACNhD,EAAMiD,UACNjD,EAAMkD,WACNlD,EAAMmD,aACNnD,EAAMoD,aACNpD,EAAMqD,oBAIV,OADAR,EAAQS,eAAetD,EAAM+C,gBACrB1G,GAAQwG,CAClB,CCAO,SAASU,EAAWlH,EAAMN,GAC/B,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAEpC,OADAxD,EAAMyD,SAAS,EAAG,EAAG,EAAG,GACjBzD,CACT,CCNO,SAAS0D,EAAarH,EAAMN,GACjC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAGpC,OCUK,SAAkCG,EAAWC,EAAa7H,GAC/D,MAAO8H,EAAYC,GCvCd,SAAwB1G,KAAY2G,GACzC,MAAMC,EAAYxB,EAAcyB,KAC9B,KACA7G,GAAW2G,EAAMG,KAAM7H,GAAyB,iBAATA,IAEzC,OAAO0H,EAAM3M,IAAI4M,EACnB,CDiCqCG,CACjCpI,GAASyH,GACTG,EACAC,GAGIQ,EAAkBb,EAAWM,GAC7BQ,EAAoBd,EAAWO,GAE/BQ,GACHF,EAAkBxB,EAAgCwB,GAC/CG,GACHF,EAAoBzB,EAAgCyB,GAKvD,OAAOnC,KAAKsC,OAAOF,EAAiBC,GNyBL,MMxBjC,CD/BeE,CAAyBzE,EGAjC,SAAqB3D,EAAMN,GAChC,MAAM2I,EAAQhC,EAAOrG,EAAMN,GAASyH,IAGpC,OAFAkB,EAAMC,YAAYD,EAAM3B,cAAe,EAAG,GAC1C2B,EAAMjB,SAAS,EAAG,EAAG,EAAG,GACjBiB,CACT,CHL+CE,CAAY5E,IAChC,CAE3B,CIGO,SAAS6E,EAAYxI,EAAMN,GAChC,MAAMiG,EAAiBC,IACjBH,EACJ/F,GAAS+F,cACT/F,GAAS+I,QAAQ/I,SAAS+F,cAC1BE,EAAeF,cACfE,EAAe8C,QAAQ/I,SAAS+F,cAChC,EAEI9B,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9BzC,EAAMf,EAAM+E,SACZC,GAAQjE,EAAMe,EAAe,EAAI,GAAKf,EAAMe,EAIlD,OAFA9B,EAAMiF,QAAQjF,EAAMiD,UAAY+B,GAChChF,EAAMyD,SAAS,EAAG,EAAG,EAAG,GACjBzD,CACT,CCpBO,SAASkF,EAAe7I,EAAMN,GACnC,OAAO8I,EAAYxI,EAAM,IAAKN,EAAS+F,aAAc,GACvD,CCJO,SAASqD,EAAe9I,EAAMN,GACnC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9B4B,EAAOpF,EAAM+C,cAEbsC,EAA4B7C,EAAcxC,EAAO,GACvDqF,EAA0BV,YAAYS,EAAO,EAAG,EAAG,GACnDC,EAA0B5B,SAAS,EAAG,EAAG,EAAG,GAC5C,MAAM6B,EAAkBJ,EAAeG,GAEjCE,EAA4B/C,EAAcxC,EAAO,GACvDuF,EAA0BZ,YAAYS,EAAM,EAAG,GAC/CG,EAA0B9B,SAAS,EAAG,EAAG,EAAG,GAC5C,MAAM+B,EAAkBN,EAAeK,GAEvC,OAAIvF,EAAMyF,WAAaH,EAAgBG,UAC9BL,EAAO,EACLpF,EAAMyF,WAAaD,EAAgBC,UACrCL,EAEAA,EAAO,CAElB,CCpBO,SAASM,EAAWrJ,EAAMN,GAC/B,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9BwB,GAAQE,EAAelF,ICExB,SAA4B3D,EAAMN,GACvC,MAAMqJ,EAAOD,EAAe9I,EAAMN,GAC5B4J,EAAkBnD,EAAczG,GAASyH,IAAMnH,EAAM,GAG3D,OAFAsJ,EAAgBhB,YAAYS,EAAM,EAAG,GACrCO,EAAgBlC,SAAS,EAAG,EAAG,EAAG,GAC3ByB,EAAeS,EACxB,CDRyCC,CAAmB5F,GAK1D,OAAOkC,KAAKsC,MAAMQ,EAAO5C,GAAsB,CACjD,CEMO,SAASyD,EAAYxJ,EAAMN,GAChC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9B4B,EAAOpF,EAAM+C,cAEbf,EAAiBC,IACjBF,EACJhG,GAASgG,uBACThG,GAAS+I,QAAQ/I,SAASgG,uBAC1BC,EAAeD,uBACfC,EAAe8C,QAAQ/I,SAASgG,uBAChC,EAEI+D,EAAsBtD,EAAczG,GAASyH,IAAMnH,EAAM,GAC/DyJ,EAAoBnB,YAAYS,EAAO,EAAG,EAAGrD,GAC7C+D,EAAoBrC,SAAS,EAAG,EAAG,EAAG,GACtC,MAAM6B,EAAkBT,EAAYiB,EAAqB/J,GAEnDgK,EAAsBvD,EAAczG,GAASyH,IAAMnH,EAAM,GAC/D0J,EAAoBpB,YAAYS,EAAM,EAAGrD,GACzCgE,EAAoBtC,SAAS,EAAG,EAAG,EAAG,GACtC,MAAM+B,EAAkBX,EAAYkB,EAAqBhK,GAEzD,OAAKiE,IAAUsF,EACNF,EAAO,GACJpF,IAAUwF,EACbJ,EAEAA,EAAO,CAElB,CC7BO,SAASY,EAAQ3J,EAAMN,GAC5B,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9BwB,GAAQH,EAAY7E,EAAOjE,ICC5B,SAAyBM,EAAMN,GACpC,MAAMiG,EAAiBC,IACjBF,EACJhG,GAASgG,uBACThG,GAAS+I,QAAQ/I,SAASgG,uBAC1BC,EAAeD,uBACfC,EAAe8C,QAAQ/I,SAASgG,uBAChC,EAEIqD,EAAOS,EAAYxJ,EAAMN,GACzBkK,EAAYzD,EAAczG,GAASyH,IAAMnH,EAAM,GAIrD,OAHA4J,EAAUtB,YAAYS,EAAM,EAAGrD,GAC/BkE,EAAUxC,SAAS,EAAG,EAAG,EAAG,GACdoB,EAAYoB,EAAWlK,EAEvC,CDhB+CmK,CAAgBlG,EAAOjE,GAKpE,OAAOmG,KAAKsC,MAAMQ,EAAO5C,GAAsB,CACjD,CEnDO,SAAS+D,EAAgB7F,EAAQ8F,GAGtC,OAFa9F,EAAS,EAAI,IAAM,IACjB4B,KAAKmE,IAAI/F,GAAQV,WAAW0G,SAASF,EAAc,IAEpE,CCWO,MAAMG,EAAkB,CAE7B,CAAAC,CAAEnK,EAAMkD,GAUN,MAAMkH,EAAapK,EAAK0G,cAElBqC,EAAOqB,EAAa,EAAIA,EAAa,EAAIA,EAC/C,OAAON,EAA0B,OAAV5G,EAAiB6F,EAAO,IAAMA,EAAM7F,EAAMhB,OACnE,EAGA,CAAAmI,CAAErK,EAAMkD,GACN,MAAMuB,EAAQzE,EAAK2G,WACnB,MAAiB,MAAVzD,EAAgBtD,OAAO6E,EAAQ,GAAKqF,EAAgBrF,EAAQ,EAAG,EACxE,EAGA6F,EAAC,CAACtK,EAAMkD,IACC4G,EAAgB9J,EAAK4G,UAAW1D,EAAMhB,QAI/C,CAAAqI,CAAEvK,EAAMkD,GACN,MAAMsH,EAAqBxK,EAAK6G,WAAa,IAAM,EAAI,KAAO,KAE9D,OAAQ3D,GACN,IAAK,IACL,IAAK,KACH,OAAOsH,EAAmBC,cAC5B,IAAK,MACH,OAAOD,EACT,IAAK,QACH,OAAOA,EAAmB,GAE5B,QACE,MAA8B,OAAvBA,EAA8B,OAAS,OAEpD,EAGAE,EAAC,CAAC1K,EAAMkD,IACC4G,EAAgB9J,EAAK6G,WAAa,IAAM,GAAI3D,EAAMhB,QAI3DyI,EAAC,CAAC3K,EAAMkD,IACC4G,EAAgB9J,EAAK6G,WAAY3D,EAAMhB,QAIhD0I,EAAC,CAAC5K,EAAMkD,IACC4G,EAAgB9J,EAAK8G,aAAc5D,EAAMhB,QAIlD2I,EAAC,CAAC7K,EAAMkD,IACC4G,EAAgB9J,EAAK+G,aAAc7D,EAAMhB,QAIlD,CAAA4I,CAAE9K,EAAMkD,GACN,MAAM6H,EAAiB7H,EAAMhB,OACvB8I,EAAehL,EAAKgH,kBAI1B,OAAO8C,EAHmBjE,KAAKoF,MAC7BD,EAAenF,KAAKC,IAAI,GAAIiF,EAAiB,IAEL7H,EAAMhB,OAClD,GCxBWgJ,EAAa,CAExBC,EAAG,SAAUnL,EAAMkD,EAAOY,GACxB,MAAMM,EAAMpE,EAAK0G,cAAgB,EAAI,EAAI,EACzC,OAAQxD,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOY,EAASM,IAAIA,EAAK,CAAEzE,MAAO,gBAEpC,IAAK,QACH,OAAOmE,EAASM,IAAIA,EAAK,CAAEzE,MAAO,WAGpC,QACE,OAAOmE,EAASM,IAAIA,EAAK,CAAEzE,MAAO,SAExC,EAGAwK,EAAG,SAAUnK,EAAMkD,EAAOY,GAExB,GAAc,OAAVZ,EAAgB,CAClB,MAAMkH,EAAapK,EAAK0G,cAElBqC,EAAOqB,EAAa,EAAIA,EAAa,EAAIA,EAC/C,OAAOtG,EAASC,cAAcgF,EAAM,CAAEqC,KAAM,QAC9C,CAEA,OAAOlB,EAAgBC,EAAEnK,EAAMkD,EACjC,EAGAmI,EAAG,SAAUrL,EAAMkD,EAAOY,EAAUpE,GAClC,MAAM4L,EAAiB9B,EAAYxJ,EAAMN,GAEnC6L,EAAWD,EAAiB,EAAIA,EAAiB,EAAIA,EAG3D,MAAc,OAAVpI,EAEK4G,EADcyB,EAAW,IACK,GAIzB,OAAVrI,EACKY,EAASC,cAAcwH,EAAU,CAAEH,KAAM,SAI3CtB,EAAgByB,EAAUrI,EAAMhB,OACzC,EAGAsJ,EAAG,SAAUxL,EAAMkD,GAIjB,OAAO4G,EAHahB,EAAe9I,GAGCkD,EAAMhB,OAC5C,EAWAuJ,EAAG,SAAUzL,EAAMkD,GAEjB,OAAO4G,EADM9J,EAAK0G,cACWxD,EAAMhB,OACrC,EAGAwJ,EAAG,SAAU1L,EAAMkD,EAAOY,GACxB,MAAMU,EAAUqB,KAAK8F,MAAM3L,EAAK2G,WAAa,GAAK,GAClD,OAAQzD,GAEN,IAAK,IACH,OAAOtD,OAAO4E,GAEhB,IAAK,KACH,OAAOsF,EAAgBtF,EAAS,GAElC,IAAK,KACH,OAAOV,EAASC,cAAcS,EAAS,CAAE4G,KAAM,YAEjD,IAAK,MACH,OAAOtH,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,SACPoB,QAAS,eAIb,QACE,OAAO+C,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,OACPoB,QAAS,eAGjB,EAGA6K,EAAG,SAAU5L,EAAMkD,EAAOY,GACxB,MAAMU,EAAUqB,KAAK8F,MAAM3L,EAAK2G,WAAa,GAAK,GAClD,OAAQzD,GAEN,IAAK,IACH,OAAOtD,OAAO4E,GAEhB,IAAK,KACH,OAAOsF,EAAgBtF,EAAS,GAElC,IAAK,KACH,OAAOV,EAASC,cAAcS,EAAS,CAAE4G,KAAM,YAEjD,IAAK,MACH,OAAOtH,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,SACPoB,QAAS,eAIb,QACE,OAAO+C,EAASU,QAAQA,EAAS,CAC/B7E,MAAO,OACPoB,QAAS,eAGjB,EAGAsJ,EAAG,SAAUrK,EAAMkD,EAAOY,GACxB,MAAMW,EAAQzE,EAAK2G,WACnB,OAAQzD,GACN,IAAK,IACL,IAAK,KACH,OAAOgH,EAAgBG,EAAErK,EAAMkD,GAEjC,IAAK,KACH,OAAOY,EAASC,cAAcU,EAAQ,EAAG,CAAE2G,KAAM,UAEnD,IAAK,MACH,OAAOtH,EAASW,MAAMA,EAAO,CAC3B9E,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASW,MAAMA,EAAO,CAC3B9E,MAAO,SACPoB,QAAS,eAIb,QACE,OAAO+C,EAASW,MAAMA,EAAO,CAAE9E,MAAO,OAAQoB,QAAS,eAE7D,EAGA8K,EAAG,SAAU7L,EAAMkD,EAAOY,GACxB,MAAMW,EAAQzE,EAAK2G,WACnB,OAAQzD,GAEN,IAAK,IACH,OAAOtD,OAAO6E,EAAQ,GAExB,IAAK,KACH,OAAOqF,EAAgBrF,EAAQ,EAAG,GAEpC,IAAK,KACH,OAAOX,EAASC,cAAcU,EAAQ,EAAG,CAAE2G,KAAM,UAEnD,IAAK,MACH,OAAOtH,EAASW,MAAMA,EAAO,CAC3B9E,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASW,MAAMA,EAAO,CAC3B9E,MAAO,SACPoB,QAAS,eAIb,QACE,OAAO+C,EAASW,MAAMA,EAAO,CAAE9E,MAAO,OAAQoB,QAAS,eAE7D,EAGA+K,EAAG,SAAU9L,EAAMkD,EAAOY,EAAUpE,GAClC,MAAMqM,EAAOpC,EAAQ3J,EAAMN,GAE3B,MAAc,OAAVwD,EACKY,EAASC,cAAcgI,EAAM,CAAEX,KAAM,SAGvCtB,EAAgBiC,EAAM7I,EAAMhB,OACrC,EAGA8J,EAAG,SAAUhM,EAAMkD,EAAOY,GACxB,MAAMmI,EAAU5C,EAAWrJ,GAE3B,MAAc,OAAVkD,EACKY,EAASC,cAAckI,EAAS,CAAEb,KAAM,SAG1CtB,EAAgBmC,EAAS/I,EAAMhB,OACxC,EAGAoI,EAAG,SAAUtK,EAAMkD,EAAOY,GACxB,MAAc,OAAVZ,EACKY,EAASC,cAAc/D,EAAK4G,UAAW,CAAEwE,KAAM,SAGjDlB,EAAgBI,EAAEtK,EAAMkD,EACjC,EAGAgJ,EAAG,SAAUlM,EAAMkD,EAAOY,GACxB,MAAMqI,EAAY9E,EAAarH,GAE/B,MAAc,OAAVkD,EACKY,EAASC,cAAcoI,EAAW,CAAEf,KAAM,cAG5CtB,EAAgBqC,EAAWjJ,EAAMhB,OAC1C,EAGAkK,EAAG,SAAUpM,EAAMkD,EAAOY,GACxB,MAAMuI,EAAYrM,EAAK0I,SACvB,OAAQxF,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOY,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,QACPoB,QAAS,eAIb,QACE,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,OACPoB,QAAS,eAGjB,EAGAuL,EAAG,SAAUtM,EAAMkD,EAAOY,EAAUpE,GAClC,MAAM2M,EAAYrM,EAAK0I,SACjB6D,GAAkBF,EAAY3M,EAAQ+F,aAAe,GAAK,GAAK,EACrE,OAAQvC,GAEN,IAAK,IACH,OAAOtD,OAAO2M,GAEhB,IAAK,KACH,OAAOzC,EAAgByC,EAAgB,GAEzC,IAAK,KACH,OAAOzI,EAASC,cAAcwI,EAAgB,CAAEnB,KAAM,QACxD,IAAK,MACH,OAAOtH,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,QACPoB,QAAS,eAIb,QACE,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,OACPoB,QAAS,eAGjB,EAGAyL,EAAG,SAAUxM,EAAMkD,EAAOY,EAAUpE,GAClC,MAAM2M,EAAYrM,EAAK0I,SACjB6D,GAAkBF,EAAY3M,EAAQ+F,aAAe,GAAK,GAAK,EACrE,OAAQvC,GAEN,IAAK,IACH,OAAOtD,OAAO2M,GAEhB,IAAK,KACH,OAAOzC,EAAgByC,EAAgBrJ,EAAMhB,QAE/C,IAAK,KACH,OAAO4B,EAASC,cAAcwI,EAAgB,CAAEnB,KAAM,QACxD,IAAK,MACH,OAAOtH,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,QACPoB,QAAS,eAIb,QACE,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,OACPoB,QAAS,eAGjB,EAGA0L,EAAG,SAAUzM,EAAMkD,EAAOY,GACxB,MAAMuI,EAAYrM,EAAK0I,SACjBgE,EAA6B,IAAdL,EAAkB,EAAIA,EAC3C,OAAQnJ,GAEN,IAAK,IACH,OAAOtD,OAAO8M,GAEhB,IAAK,KACH,OAAO5C,EAAgB4C,EAAcxJ,EAAMhB,QAE7C,IAAK,KACH,OAAO4B,EAASC,cAAc2I,EAAc,CAAEtB,KAAM,QAEtD,IAAK,MACH,OAAOtH,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,cACPoB,QAAS,eAGb,IAAK,QACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,QACPoB,QAAS,eAIb,QACE,OAAO+C,EAASY,IAAI2H,EAAW,CAC7B1M,MAAO,OACPoB,QAAS,eAGjB,EAGAwJ,EAAG,SAAUvK,EAAMkD,EAAOY,GACxB,MACM0G,EADQxK,EAAK6G,WACgB,IAAM,EAAI,KAAO,KAEpD,OAAQ3D,GACN,IAAK,IACL,IAAK,KACH,OAAOY,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,cACPoB,QAAS,eAEb,IAAK,MACH,OAAO+C,EACJa,UAAU6F,EAAoB,CAC7B7K,MAAO,cACPoB,QAAS,eAEV4L,cACL,IAAK,QACH,OAAO7I,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,SACPoB,QAAS,eAGb,QACE,OAAO+C,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,OACPoB,QAAS,eAGjB,EAGA6L,EAAG,SAAU5M,EAAMkD,EAAOY,GACxB,MAAM+I,EAAQ7M,EAAK6G,WACnB,IAAI2D,EASJ,OAPEA,EADY,KAAVqC,EAjfA,OAmfiB,IAAVA,EApfH,WAufeA,EAAQ,IAAM,EAAI,KAAO,KAGxC3J,GACN,IAAK,IACL,IAAK,KACH,OAAOY,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,cACPoB,QAAS,eAEb,IAAK,MACH,OAAO+C,EACJa,UAAU6F,EAAoB,CAC7B7K,MAAO,cACPoB,QAAS,eAEV4L,cACL,IAAK,QACH,OAAO7I,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,SACPoB,QAAS,eAGb,QACE,OAAO+C,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,OACPoB,QAAS,eAGjB,EAGA+L,EAAG,SAAU9M,EAAMkD,EAAOY,GACxB,MAAM+I,EAAQ7M,EAAK6G,WACnB,IAAI2D,EAWJ,OATEA,EADEqC,GAAS,GAthBN,UAwhBIA,GAAS,GAzhBX,YA2hBEA,GAAS,EA5hBb,UAGF,QA+hBG3J,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OAAOY,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,cACPoB,QAAS,eAEb,IAAK,QACH,OAAO+C,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,SACPoB,QAAS,eAGb,QACE,OAAO+C,EAASa,UAAU6F,EAAoB,CAC5C7K,MAAO,OACPoB,QAAS,eAGjB,EAGA2J,EAAG,SAAU1K,EAAMkD,EAAOY,GACxB,GAAc,OAAVZ,EAAgB,CAClB,IAAI2J,EAAQ7M,EAAK6G,WAAa,GAE9B,OADc,IAAVgG,IAAaA,EAAQ,IAClB/I,EAASC,cAAc8I,EAAO,CAAEzB,KAAM,QAC/C,CAEA,OAAOlB,EAAgBQ,EAAE1K,EAAMkD,EACjC,EAGAyH,EAAG,SAAU3K,EAAMkD,EAAOY,GACxB,MAAc,OAAVZ,EACKY,EAASC,cAAc/D,EAAK6G,WAAY,CAAEuE,KAAM,SAGlDlB,EAAgBS,EAAE3K,EAAMkD,EACjC,EAGA6J,EAAG,SAAU/M,EAAMkD,EAAOY,GACxB,MAAM+I,EAAQ7M,EAAK6G,WAAa,GAEhC,MAAc,OAAV3D,EACKY,EAASC,cAAc8I,EAAO,CAAEzB,KAAM,SAGxCtB,EAAgB+C,EAAO3J,EAAMhB,OACtC,EAGA8K,EAAG,SAAUhN,EAAMkD,EAAOY,GACxB,IAAI+I,EAAQ7M,EAAK6G,WAGjB,OAFc,IAAVgG,IAAaA,EAAQ,IAEX,OAAV3J,EACKY,EAASC,cAAc8I,EAAO,CAAEzB,KAAM,SAGxCtB,EAAgB+C,EAAO3J,EAAMhB,OACtC,EAGA0I,EAAG,SAAU5K,EAAMkD,EAAOY,GACxB,MAAc,OAAVZ,EACKY,EAASC,cAAc/D,EAAK8G,aAAc,CAAEsE,KAAM,WAGpDlB,EAAgBU,EAAE5K,EAAMkD,EACjC,EAGA2H,EAAG,SAAU7K,EAAMkD,EAAOY,GACxB,MAAc,OAAVZ,EACKY,EAASC,cAAc/D,EAAK+G,aAAc,CAAEqE,KAAM,WAGpDlB,EAAgBW,EAAE7K,EAAMkD,EACjC,EAGA4H,EAAG,SAAU9K,EAAMkD,GACjB,OAAOgH,EAAgBY,EAAE9K,EAAMkD,EACjC,EAGA+J,EAAG,SAAUjN,EAAMkD,EAAOgK,GACxB,MAAMC,EAAiBnN,EAAKoN,oBAE5B,GAAuB,IAAnBD,EACF,MAAO,IAGT,OAAQjK,GAEN,IAAK,IACH,OAAOmK,EAAkCF,GAK3C,IAAK,OACL,IAAK,KACH,OAAOG,GAAeH,GAOxB,QACE,OAAOG,GAAeH,EAAgB,KAE5C,EAGAI,EAAG,SAAUvN,EAAMkD,EAAOgK,GACxB,MAAMC,EAAiBnN,EAAKoN,oBAE5B,OAAQlK,GAEN,IAAK,IACH,OAAOmK,EAAkCF,GAK3C,IAAK,OACL,IAAK,KACH,OAAOG,GAAeH,GAOxB,QACE,OAAOG,GAAeH,EAAgB,KAE5C,EAGAK,EAAG,SAAUxN,EAAMkD,EAAOgK,GACxB,MAAMC,EAAiBnN,EAAKoN,oBAE5B,OAAQlK,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQuK,EAAoBN,EAAgB,KAGrD,QACE,MAAO,MAAQG,GAAeH,EAAgB,KAEpD,EAGAO,EAAG,SAAU1N,EAAMkD,EAAOgK,GACxB,MAAMC,EAAiBnN,EAAKoN,oBAE5B,OAAQlK,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,MAAO,MAAQuK,EAAoBN,EAAgB,KAGrD,QACE,MAAO,MAAQG,GAAeH,EAAgB,KAEpD,EAGAQ,EAAG,SAAU3N,EAAMkD,EAAOgK,GAExB,OAAOpD,EADWjE,KAAKoF,OAAOjL,EAAO,KACHkD,EAAMhB,OAC1C,EAGA0L,EAAG,SAAU5N,EAAMkD,EAAOgK,GACxB,OAAOpD,GAAiB9J,EAAMkD,EAAMhB,OACtC,GAGF,SAASuL,EAAoBI,EAAQC,EAAY,IAC/C,MAAMC,EAAOF,EAAS,EAAI,IAAM,IAC1BG,EAAYnI,KAAKmE,IAAI6D,GACrBhB,EAAQhH,KAAKoF,MAAM+C,EAAY,IAC/BC,EAAUD,EAAY,GAC5B,OAAgB,IAAZC,EACKF,EAAOnO,OAAOiN,GAEhBkB,EAAOnO,OAAOiN,GAASiB,EAAYhE,EAAgBmE,EAAS,EACrE,CAEA,SAASZ,EAAkCQ,EAAQC,GACjD,OAAID,EAAS,IAAO,GACLA,EAAS,EAAI,IAAM,KAClB/D,EAAgBjE,KAAKmE,IAAI6D,GAAU,GAAI,GAEhDP,GAAeO,EAAQC,EAChC,CAEA,SAASR,GAAeO,EAAQC,EAAY,IAC1C,MAAMC,EAAOF,EAAS,EAAI,IAAM,IAC1BG,EAAYnI,KAAKmE,IAAI6D,GAG3B,OAAOE,EAFOjE,EAAgBjE,KAAKoF,MAAM+C,EAAY,IAAK,GAEpCF,EADNhE,EAAgBkE,EAAY,GAAI,EAElD,CCvwBA,MAAME,GAAoB,CAAC9L,EAASrC,KAClC,OAAQqC,GACN,IAAK,IACH,OAAOrC,EAAWC,KAAK,CAAEL,MAAO,UAClC,IAAK,KACH,OAAOI,EAAWC,KAAK,CAAEL,MAAO,WAClC,IAAK,MACH,OAAOI,EAAWC,KAAK,CAAEL,MAAO,SAElC,QACE,OAAOI,EAAWC,KAAK,CAAEL,MAAO,WAIhCwO,GAAoB,CAAC/L,EAASrC,KAClC,OAAQqC,GACN,IAAK,IACH,OAAOrC,EAAWM,KAAK,CAAEV,MAAO,UAClC,IAAK,KACH,OAAOI,EAAWM,KAAK,CAAEV,MAAO,WAClC,IAAK,MACH,OAAOI,EAAWM,KAAK,CAAEV,MAAO,SAElC,QACE,OAAOI,EAAWM,KAAK,CAAEV,MAAO,WAoCzByO,GAAiB,CAC5BC,EAAGF,GACHG,EAlC4B,CAAClM,EAASrC,KACtC,MAAM0B,EAAcW,EAAQV,MAAM,cAAgB,GAC5C6M,EAAc9M,EAAY,GAC1B+M,EAAc/M,EAAY,GAEhC,IAAK+M,EACH,OAAON,GAAkB9L,EAASrC,GAGpC,IAAI0O,EAEJ,OAAQF,GACN,IAAK,IACHE,EAAiB1O,EAAWO,SAAS,CAAEX,MAAO,UAC9C,MACF,IAAK,KACH8O,EAAiB1O,EAAWO,SAAS,CAAEX,MAAO,WAC9C,MACF,IAAK,MACH8O,EAAiB1O,EAAWO,SAAS,CAAEX,MAAO,SAC9C,MAEF,QACE8O,EAAiB1O,EAAWO,SAAS,CAAEX,MAAO,SAIlD,OAAO8O,EACJnL,QAAQ,WAAY4K,GAAkBK,EAAaxO,IACnDuD,QAAQ,WAAY6K,GAAkBK,EAAazO,MCzDlD2O,GAAmB,OACnBC,GAAkB,OAElBC,GAAc,CAAC,IAAK,KAAM,KAAM,QAE/B,SAASC,GAA0B3L,GACxC,OAAOwL,GAAiBrM,KAAKa,EAC/B,CAEO,SAAS4L,GAAyB5L,GACvC,OAAOyL,GAAgBtM,KAAKa,EAC9B,CAEO,SAAS6L,GAA0B7L,EAAO8L,EAAQC,GACvD,MAAMC,EAKR,SAAiBhM,EAAO8L,EAAQC,GAC9B,MAAME,EAAuB,MAAbjM,EAAM,GAAa,QAAU,oBAC7C,MAAO,SAASA,EAAMyJ,gCAAgCzJ,aAAiB8L,uBAA4BG,oBAA0BF,kFAC/H,CARmBG,CAAQlM,EAAO8L,EAAQC,GAExC,GADAtW,QAAQ0W,KAAKH,GACTN,GAAY7V,SAASmK,GAAQ,MAAM,IAAIoM,WAAWJ,EACxD,CCiBO,SAASK,GAAQvP,GACtB,WCHqBnC,EDGHmC,aCDCoG,MACC,iBAAVvI,GACoC,kBAA1C0E,OAAOC,UAAUe,SAASb,KAAK7E,KDDQ,iBAATmC,GAAsBwP,OAAOnJ,EAAOrG,KCHjE,IAAgBnC,CDIvB,CAGA,MEZM4R,GACJ,wDAIIC,GAA6B,oCAE7BC,GAAsB,eACtBC,GAAoB,MACpBC,GAAgC,WAoS/B,SAASb,GAAOhP,EAAM8P,EAAWpQ,GACtC,MAAMiG,EAAiBC,IACjB6C,EAAS/I,GAAS+I,QAAU9C,EAAe8C,QAAU,EAErD/C,EACJhG,GAASgG,uBACThG,GAAS+I,QAAQ/I,SAASgG,uBAC1BC,EAAeD,uBACfC,EAAe8C,QAAQ/I,SAASgG,uBAChC,EAEID,EACJ/F,GAAS+F,cACT/F,GAAS+I,QAAQ/I,SAAS+F,cAC1BE,EAAeF,cACfE,EAAe8C,QAAQ/I,SAAS+F,cAChC,EAEIsK,EAAe1J,EAAOrG,EAAMN,GAASyH,IAE3C,IAAKoI,GAAQQ,GACX,MAAM,IAAIT,WAAW,sBAGvB,IAAIU,EAAQF,EACTpO,MAAMgO,IACN3U,IAAKkV,IACJ,MAAMC,EAAiBD,EAAU,GACjC,MAAuB,MAAnBC,GAA6C,MAAnBA,GAErBC,EADe/B,GAAe8B,IAChBD,EAAWxH,EAAO1I,YAElCkQ,IAERG,KAAK,IACL1O,MAAM+N,IACN1U,IAAKkV,IAEJ,GAAkB,OAAdA,EACF,MAAO,CAAEI,SAAS,EAAOxS,MAAO,KAGlC,MAAMqS,EAAiBD,EAAU,GACjC,GAAuB,MAAnBC,EACF,MAAO,CAAEG,SAAS,EAAOxS,MAAOyS,GAAmBL,IAGrD,GAAI/E,EAAWgF,GACb,MAAO,CAAEG,SAAS,EAAMxS,MAAOoS,GAGjC,GAAIC,EAAexO,MAAMmO,IACvB,MAAM,IAAIP,WACR,iEACEY,EACA,KAIN,MAAO,CAAEG,SAAS,EAAOxS,MAAOoS,KAIhCxH,EAAO3E,SAASyM,eAClBP,EAAQvH,EAAO3E,SAASyM,aAAaR,EAAcC,IAGrD,MAAMQ,EAAmB,CACvB9K,wBACAD,eACAgD,UAGF,OAAOuH,EACJjV,IAAK0V,IACJ,IAAKA,EAAKJ,QAAS,OAAOI,EAAK5S,MAE/B,MAAMqF,EAAQuN,EAAK5S,MAYnB,QATI6B,GAASgR,6BACT5B,GAAyB5L,KACzBxD,GAASiR,8BACT9B,GAA0B3L,KAE5B6L,GAA0B7L,EAAO4M,EAAWlQ,OAAOI,KAI9C4Q,EADW1F,EAAWhI,EAAM,KAClB6M,EAAc7M,EAAOuF,EAAO3E,SAAU0M,KAExDJ,KAAK,GACV,CAEA,SAASE,GAAmBrB,GAC1B,MAAM4B,EAAU5B,EAAMvN,MAAMiO,IAE5B,OAAKkB,EAIEA,EAAQ,GAAGvN,QAAQsM,GAAmB,KAHpCX,CAIX,CCzaO,MAAM6B,GACXC,YAAc,EAEd,QAAAC,CAASC,EAAUpN,GACjB,OAAO,CACT,EAGK,MAAMqN,WAAoBJ,GAC/B,WAAA/Y,CACE8F,EAEAsT,EAEAC,EAEA/X,EACA0X,GAEAM,QACAhZ,KAAKwF,MAAQA,EACbxF,KAAK8Y,cAAgBA,EACrB9Y,KAAK+Y,SAAWA,EAChB/Y,KAAKgB,SAAWA,EACZ0X,IACF1Y,KAAK0Y,YAAcA,EAEvB,CAEA,QAAAC,CAAShR,EAAMN,GACb,OAAOrH,KAAK8Y,cAAcnR,EAAM3H,KAAKwF,MAAO6B,EAC9C,CAEA,GAAA4R,CAAItR,EAAMuR,EAAO7R,GACf,OAAOrH,KAAK+Y,SAASpR,EAAMuR,EAAOlZ,KAAKwF,MAAO6B,EAChD,EAGK,MAAM8R,WAA2BV,GACtCzX,SAzC6B,GA0C7B0X,aAAe,EAEf,WAAAhZ,CAAYgJ,EAAS0Q,GACnBJ,QACAhZ,KAAK0I,QAAUA,GAAW,CAAEf,GAASmG,EAAcsL,EAAWzR,GAChE,CAEA,GAAAsR,CAAItR,EAAMuR,GACR,OAAIA,EAAMG,eAAuB1R,EAC1BmG,EAAcnG,ECxBlB,SAAmBA,EAAMjI,GAC9B,MAAMsQ,EAaR,SAAuBtQ,GACrB,MACyB,mBAAhBA,GACPA,EAAYyK,WAAWzK,cAAgBA,CAE3C,CAlBgB4Z,CAAc5Z,GACxB,IAAIA,EAAY,GAChBoO,EAAcpO,EAAa,GAQ/B,OAPAsQ,EAAMC,YAAYtI,EAAK0G,cAAe1G,EAAK2G,WAAY3G,EAAK4G,WAC5DyB,EAAMjB,SACJpH,EAAK6G,WACL7G,EAAK8G,aACL9G,EAAK+G,aACL/G,EAAKgH,mBAEAqB,CACT,CDY+BuJ,CAAU5R,EAAM3H,KAAK0I,SAClD,EErDK,MAAM8Q,GACX,GAAAC,CAAIC,EAAY7O,EAAOxB,EAAOhC,GAC5B,MAAM0D,EAAS/K,KAAKsC,MAAMoX,EAAY7O,EAAOxB,EAAOhC,GACpD,OAAK0D,EAIE,CACL4O,OAAQ,IAAId,GACV9N,EAAOvF,MACPxF,KAAK2Y,SACL3Y,KAAKiZ,IACLjZ,KAAKgB,SACLhB,KAAK0Y,aAEPlO,KAAMO,EAAOP,MAXN,IAaX,CAEA,QAAAmO,CAASC,EAAUgB,EAAQpO,GACzB,OAAO,CACT,ECvBK,MAAMqO,GACJ,iBADIA,GAEL,qBAFKA,GAGA,kCAHAA,GAIL,qBAJKA,GAKF,qBALEA,GAMF,qBANEA,GAOF,iBAPEA,GAQF,iBAREA,GASH,YATGA,GAUH,YAVGA,GAYE,MAZFA,GAaA,WAbAA,GAcE,WAdFA,GAeC,WAfDA,GAiBM,SAjBNA,GAkBQ,QAlBRA,GAmBM,aAnBNA,GAoBQ,aApBRA,GAqBO,aAGPC,GACW,2BADXA,GAEJ,0BAFIA,GAGW,oCAHXA,GAID,2BAJCA,GAKc,sCCrBpB,SAASC,GAASC,EAAeC,GACtC,OAAKD,EAIE,CACLxU,MAAOyU,EAAMD,EAAcxU,OAC3BgF,KAAMwP,EAAcxP,MALbwP,CAOX,CAEO,SAASE,GAAoBnQ,EAAS2P,GAC3C,MAAMtQ,EAAcsQ,EAAWrQ,MAAMU,GAErC,OAAKX,EAIE,CACL5D,MAAOwH,SAAS5D,EAAY,GAAI,IAChCoB,KAAMkP,EAAWjP,MAAMrB,EAAY,GAAGS,SAL/B,IAOX,CAEO,SAASsQ,GAAqBpQ,EAAS2P,GAC5C,MAAMtQ,EAAcsQ,EAAWrQ,MAAMU,GAErC,OAAKX,EAKkB,MAAnBA,EAAY,GACP,CACL5D,MAAO,EACPgF,KAAMkP,EAAWjP,MAAM,IASpB,CACLjF,OAN8B,MAAnB4D,EAAY,GAAa,GAAK,I7BkDX,M6BjDlBA,EAAY,GAAK4D,SAAS5D,EAAY,GAAI,IAAM,G7B0C5B,K6BzClBA,EAAY,GAAK4D,SAAS5D,EAAY,GAAI,IAAM,G7BuD9B,K6BtDlBA,EAAY,GAAK4D,SAAS5D,EAAY,GAAI,IAAM,IAQ9DoB,KAAMkP,EAAWjP,MAAMrB,EAAY,GAAGS,SAtB/B,IAwBX,CAEO,SAASuQ,GAAqBV,GACnC,OAAOQ,GAAoBL,GAAiCH,EAC9D,CAEO,SAASW,GAAaC,EAAGZ,GAC9B,OAAQY,GACN,KAAK,EACH,OAAOJ,GAAoBL,GAA6BH,GAC1D,KAAK,EACH,OAAOQ,GAAoBL,GAA2BH,GACxD,KAAK,EACH,OAAOQ,GAAoBL,GAA6BH,GAC1D,KAAK,EACH,OAAOQ,GAAoBL,GAA4BH,GACzD,QACE,OAAOQ,GAAoB,IAAIK,OAAO,UAAYD,EAAI,KAAMZ,GAElE,CAEO,SAASc,GAAmBF,EAAGZ,GACpC,OAAQY,GACN,KAAK,EACH,OAAOJ,GAAoBL,GAAmCH,GAChE,KAAK,EACH,OAAOQ,GAAoBL,GAAiCH,GAC9D,KAAK,EACH,OAAOQ,GAAoBL,GAAmCH,GAChE,KAAK,EACH,OAAOQ,GAAoBL,GAAkCH,GAC/D,QACE,OAAOQ,GAAoB,IAAIK,OAAO,YAAcD,EAAI,KAAMZ,GAEpE,CAEO,SAASe,GAAqBnO,GACnC,OAAQA,GACN,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,GACT,IAAK,KACL,IAAK,OACL,IAAK,YACH,OAAO,GAIT,QACE,OAAO,EAEb,CAEO,SAASoO,GAAsBC,EAAcC,GAClD,MAAMC,EAAcD,EAAc,EAK5BE,EAAiBD,EAAcD,EAAc,EAAIA,EAEvD,IAAI7P,EACJ,GAAI+P,GAAkB,GACpB/P,EAAS4P,GAAgB,QACpB,CACL,MAAMI,EAAWD,EAAiB,GAGlC/P,EAAS4P,EAF4C,IAA7BnN,KAAKoF,MAAMmI,EAAW,MACpBJ,GAAgBI,EAAW,IACU,IAAM,EACvE,CAEA,OAAOF,EAAc9P,EAAS,EAAIA,CACpC,CAEO,SAASiQ,GAAgBtK,GAC9B,OAAOA,EAAO,KAAQ,GAAMA,EAAO,GAAM,GAAKA,EAAO,KAAQ,CAC/D,CChIA,MAAMuK,GAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7DC,GAA0B,CAC9B,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,ICkBvC,SAASC,GAAQxT,EAAMyT,EAAQ/T,GACpC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IACpC,OAAIqI,MAAMiE,GAAgBtN,EAAczG,GAASyH,IAAMnH,EAAM0T,KAGxDD,GAEL9P,EAAMiF,QAAQjF,EAAMiD,UAAY6M,GACzB9P,GAHaA,CAItB,CCHO,SAASgQ,GAAO3T,EAAM0E,EAAKhF,GAChC,MAAMiG,EAAiBC,IACjBH,EACJ/F,GAAS+F,cACT/F,GAAS+I,QAAQ/I,SAAS+F,cAC1BE,EAAeF,cACfE,EAAe8C,QAAQ/I,SAAS+F,cAChC,EAEI4C,EAAQhC,EAAOrG,EAAMN,GAASyH,IAC9ByM,EAAavL,EAAMK,SAKnBmL,EAAQ,EAAIpO,EAKlB,OAAO+N,GAAQnL,EAHb3D,EAAM,GAAKA,EAAM,EACbA,GAAQkP,EAAaC,GAAS,IANlBnP,EAAM,EACM,GAAK,EAMhBmP,GAAS,GAAOD,EAAaC,GAAS,EAC7BnU,EAC9B,CCxBO,SAASoU,GAAU9T,EAAM0E,EAAKhF,GACnC,MAAM2I,EAAQhC,EAAOrG,EAAMN,GAASyH,IAGpC,OAAOqM,GAAQnL,EADF3D,ECRR,SAAmB1E,EAAMN,GAC9B,MAAMgF,EAAM2B,EAAOrG,EAAMN,GAASyH,IAAIuB,SACtC,OAAe,IAARhE,EAAY,EAAIA,CACzB,CDIqBqP,CAAU1L,EAAO3I,GAERA,EAC9B,CEsCO,MAAMsU,GAAU,CACrB7I,EAAG,IC1EE,cAAwB0G,GAC7BxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OACExB,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,iBAC/B+B,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,WAInC,IAAK,QACH,OAAO+B,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,WAGxC,QACE,OACE+B,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,UAC/B+B,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,iBAC/B+B,EAAM0C,IAAI2N,EAAY,CAAEpS,MAAO,WAGvC,CAEA,GAAA2R,CAAItR,EAAMuR,EAAO1T,GAIf,OAHA0T,EAAMnN,IAAMvG,EACZmC,EAAKsI,YAAYzK,EAAO,EAAG,GAC3BmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,MDwCrC9J,EAAG,IEjEE,cAAyB0H,GAC9BxY,SAAW,IACX4a,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEnE,KAAAtZ,CAAMoX,EAAY7O,EAAOxB,GACvB,MAAMkB,EAAiBmG,IAAS,CAC9BA,OACAmL,eAA0B,OAAVhR,IAGlB,OAAQA,GACN,IAAK,IACH,OAAOkP,GAASM,GAAa,EAAGX,GAAanP,GAC/C,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,SAERxI,GAEJ,QACE,OAAOwP,GAASM,GAAaxP,EAAMhB,OAAQ6P,GAAanP,GAE9D,CAEA,QAAAoO,CAASrN,EAAO9F,GACd,OAAOA,EAAMqW,gBAAkBrW,EAAMkL,KAAO,CAC9C,CAEA,GAAAuI,CAAItR,EAAMuR,EAAO1T,GACf,MAAMoV,EAAcjT,EAAK0G,cAEzB,GAAI7I,EAAMqW,eAAgB,CACxB,MAAMC,EAAyBpB,GAC7BlV,EAAMkL,KACNkK,GAIF,OAFAjT,EAAKsI,YAAY6L,EAAwB,EAAG,GAC5CnU,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEA,MAAM+I,EACF,QAASwI,GAAwB,IAAdA,EAAMnN,IAAyB,EAAIvG,EAAMkL,KAAvBlL,EAAMkL,KAG/C,OAFA/I,EAAKsI,YAAYS,EAAM,EAAG,GAC1B/I,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,GFmBAqL,EAAG,IGtEE,cAAkCwG,GACvCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,MAAMkB,EAAiBmG,IAAS,CAC9BA,OACAmL,eAA0B,OAAVhR,IAGlB,OAAQA,GACN,IAAK,IACH,OAAOkP,GAASM,GAAa,EAAGX,GAAanP,GAC/C,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,SAERxI,GAEJ,QACE,OAAOwP,GAASM,GAAaxP,EAAMhB,OAAQ6P,GAAanP,GAE9D,CAEA,QAAAoO,CAASrN,EAAO9F,GACd,OAAOA,EAAMqW,gBAAkBrW,EAAMkL,KAAO,CAC9C,CAEA,GAAAuI,CAAItR,EAAMuR,EAAO1T,EAAO6B,GACtB,MAAMuT,EAAczJ,EAAYxJ,EAAMN,GAEtC,GAAI7B,EAAMqW,eAAgB,CACxB,MAAMC,EAAyBpB,GAC7BlV,EAAMkL,KACNkK,GAQF,OANAjT,EAAKsI,YACH6L,EACA,EACAzU,EAAQgG,uBAEV1F,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBoB,EAAYxI,EAAMN,EAC3B,CAEA,MAAMqJ,EACF,QAASwI,GAAwB,IAAdA,EAAMnN,IAAyB,EAAIvG,EAAMkL,KAAvBlL,EAAMkL,KAG/C,OAFA/I,EAAKsI,YAAYS,EAAM,EAAGrJ,EAAQgG,uBAClC1F,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBoB,EAAYxI,EAAMN,EAC3B,CAEAuU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MHMFzI,EAAG,IIxEE,cAAgCqG,GACrCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,GAChB,OACS2P,GADK,MAAV3P,EACwB,EAGFA,EAAMhB,OAHD6P,EAIjC,CAEA,GAAAT,CAAItR,EAAMoU,EAAQvW,GAChB,MAAMwW,EAAkBlO,EAAcnG,EAAM,GAG5C,OAFAqU,EAAgB/L,YAAYzK,EAAO,EAAG,GACtCwW,EAAgBjN,SAAS,EAAG,EAAG,EAAG,GAC3ByB,EAAewL,EACxB,CAEAJ,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MJwCFxI,EAAG,IK5EE,cAAiCoG,GACtCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,GAChB,OACS2P,GADK,MAAV3P,EACwB,EAGFA,EAAMhB,OAHD6P,EAIjC,CAEA,GAAAT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsI,YAAYzK,EAAO,EAAG,GAC3BmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,ML4DxEvI,EAAG,IM7EE,cAA4BmG,GACjCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GAEN,IAAK,IACL,IAAK,KACH,OAAOwP,GAAaxP,EAAMhB,OAAQ6P,GAEpC,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,YAEjD,IAAK,MACH,OACE1J,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,SACPoB,QAAS,eAKf,IAAK,QACH,OAAOW,EAAM8C,QAAQuN,EAAY,CAC/BpS,MAAO,SACPoB,QAAS,eAIb,QACE,OACEW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,OACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,SACPoB,QAAS,eAInB,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsU,SAAuB,GAAbzW,EAAQ,GAAQ,GAC/BmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MNGFrI,EAAG,IO9EE,cAAsCiG,GAC3CxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GAEN,IAAK,IACL,IAAK,KACH,OAAOwP,GAAaxP,EAAMhB,OAAQ6P,GAEpC,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,YAEjD,IAAK,MACH,OACE1J,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,SACPoB,QAAS,eAKf,IAAK,QACH,OAAOW,EAAM8C,QAAQuN,EAAY,CAC/BpS,MAAO,SACPoB,QAAS,eAIb,QACE,OACEW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,OACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM8C,QAAQuN,EAAY,CACxBpS,MAAO,SACPoB,QAAS,eAInB,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsU,SAAuB,GAAbzW,EAAQ,GAAQ,GAC/BmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MPIF5J,EAAG,IQ9EE,cAA0BwH,GAC/BoC,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAGF5a,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,MAAMkB,EAAiB/E,GAAUA,EAAQ,EAEzC,OAAQqF,GAEN,IAAK,IACH,OAAOkP,GACLG,GAAoBL,GAAuBH,GAC3CnP,GAGJ,IAAK,KACH,OAAOwP,GAASM,GAAa,EAAGX,GAAanP,GAE/C,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,UAERxI,GAGJ,IAAK,MACH,OACElB,EAAM+C,MAAMsN,EAAY,CACtBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAIxD,IAAK,QACH,OAAOW,EAAM+C,MAAMsN,EAAY,CAC7BpS,MAAO,SACPoB,QAAS,eAIb,QACE,OACEW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,OAAQoB,QAAS,gBAClDW,EAAM+C,MAAMsN,EAAY,CACtBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAG5D,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsU,SAASzW,EAAO,GACrBmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,GRCA6L,EAAG,IS/EE,cAAoCgG,GACzCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,MAAMkB,EAAiB/E,GAAUA,EAAQ,EAEzC,OAAQqF,GAEN,IAAK,IACH,OAAOkP,GACLG,GAAoBL,GAAuBH,GAC3CnP,GAGJ,IAAK,KACH,OAAOwP,GAASM,GAAa,EAAGX,GAAanP,GAE/C,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,UAERxI,GAGJ,IAAK,MACH,OACElB,EAAM+C,MAAMsN,EAAY,CACtBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAIxD,IAAK,QACH,OAAOW,EAAM+C,MAAMsN,EAAY,CAC7BpS,MAAO,SACPoB,QAAS,eAIb,QACE,OACEW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,OAAQoB,QAAS,gBAClDW,EAAM+C,MAAMsN,EAAY,CACtBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAM+C,MAAMsN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAG5D,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsU,SAASzW,EAAO,GACrBmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MTGFnI,EAAG,IU7EE,cAA8B+F,GACnCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAsBH,GACnD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,EAAO6B,GACvB,OAAO8I,ECkBJ,SAAiBxI,EAAM+L,EAAMrM,GAClC,MAAM2I,EAAQhC,EAAOrG,EAAMN,GAASyH,IAC9BwB,EAAOgB,EAAQtB,EAAO3I,GAAWqM,EAEvC,OADA1D,EAAMO,QAAQP,EAAMzB,UAAmB,EAAP+B,GACzBtC,EAAOgC,EAAO3I,GAASyH,GAChC,CDvBuBoN,CAAQvU,EAAMnC,EAAO6B,GAAUA,EACpD,CAEAuU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MV2CFjI,EAAG,IY9EE,cAA4B6F,GACjCxY,SAAW,IAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAsBH,GACnD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAChB,OAAOgL,ECIJ,SAAoB7I,EAAM+L,EAAMrM,GACrC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9BwB,EAAOU,EAAW1F,EAAOjE,GAAWqM,EAE1C,OADApI,EAAMiF,QAAQjF,EAAMiD,UAAmB,EAAP+B,GACzBhF,CACT,CDT0B6Q,CAAWxU,EAAMnC,GACzC,CAEAoW,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MZ2CF3J,EAAG,ILxEE,cAAyBuH,GAC9BxY,SAAW,GACX0X,YAAc,EAEd,KAAApW,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAsBH,GACnD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAAShR,EAAMnC,GACb,MACM4W,EAAapB,GADNrT,EAAK0G,eAEZjC,EAAQzE,EAAK2G,WACnB,OAAI8N,EACK5W,GAAS,GAAKA,GAAS0V,GAAwB9O,GAE/C5G,GAAS,GAAKA,GAASyV,GAAc7O,EAEhD,CAEA,GAAA6M,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAK4I,QAAQ/K,GACbmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MK6BF/H,EAAG,Ic/EE,cAA8B2F,GACnCxY,SAAW,GAEXqb,YAAc,EAEd,KAAA/Z,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACL,IAAK,KACH,OAAOqP,GAAoBL,GAA2BH,GACxD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAAShR,EAAMnC,GAGb,OADmBwV,GADNrT,EAAK0G,eAGT7I,GAAS,GAAKA,GAAS,IAEvBA,GAAS,GAAKA,GAAS,GAElC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAKsU,SAAS,EAAGzW,GACjBmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MdgCF7H,EAAG,IerFE,cAAwByF,GAC7BxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GAEN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OACExB,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAItD,IAAK,QACH,OAAOW,EAAMgD,IAAIqN,EAAY,CAC3BpS,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAKtD,QACE,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,OAAQoB,QAAS,gBAChDW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAG1D,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,EAAO6B,GAGvB,OAFAM,EAAO2T,GAAO3T,EAAMnC,EAAO6B,IACtB0H,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,Mf8B/C3H,EAAG,IgBpFE,cAA6BuF,GAClCxY,SAAW,GACX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,EAAOhC,GAC9B,MAAMkD,EAAiB/E,IAErB,MAAM8W,EAA8C,EAA9B9O,KAAK+O,OAAO/W,EAAQ,GAAK,GAC/C,OAASA,EAAQ6B,EAAQ+F,aAAe,GAAK,EAAKkP,GAGpD,OAAQzR,GAEN,IAAK,IACL,IAAK,KACH,OAAOkP,GAASM,GAAaxP,EAAMhB,OAAQ6P,GAAanP,GAE1D,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,QAERxI,GAGJ,IAAK,MACH,OACElB,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAItD,IAAK,QACH,OAAOW,EAAMgD,IAAIqN,EAAY,CAC3BpS,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAKtD,QACE,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,OAAQoB,QAAS,gBAChDW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAG1D,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,EAAO6B,GAGvB,OAFAM,EAAO2T,GAAO3T,EAAMnC,EAAO6B,IACtB0H,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MhBDFzH,EAAG,IiBrFE,cAAuCqF,GAC5CxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,EAAOhC,GAC9B,MAAMkD,EAAiB/E,IAErB,MAAM8W,EAA8C,EAA9B9O,KAAK+O,OAAO/W,EAAQ,GAAK,GAC/C,OAASA,EAAQ6B,EAAQ+F,aAAe,GAAK,EAAKkP,GAGpD,OAAQzR,GAEN,IAAK,IACL,IAAK,KACH,OAAOkP,GAASM,GAAaxP,EAAMhB,OAAQ6P,GAAanP,GAE1D,IAAK,KACH,OAAOwP,GACL1Q,EAAMqC,cAAcgO,EAAY,CAC9B3G,KAAM,QAERxI,GAGJ,IAAK,MACH,OACElB,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAItD,IAAK,QACH,OAAOW,EAAMgD,IAAIqN,EAAY,CAC3BpS,MAAO,SACPoB,QAAS,eAGb,IAAK,SACH,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAKtD,QACE,OACEW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,OAAQoB,QAAS,gBAChDW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,QAASoB,QAAS,gBACjDW,EAAMgD,IAAIqN,EAAY,CAAEpS,MAAO,SAAUoB,QAAS,eAG1D,CAEA,QAAAiQ,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,EAAO6B,GAGvB,OAFAM,EAAO2T,GAAO3T,EAAMnC,EAAO6B,IACtB0H,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MjBDFxH,EAAG,IkBtFE,cAA2BoF,GAChCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,MAAMkB,EAAiB/E,GACP,IAAVA,EACK,EAEFA,EAGT,OAAQqF,GAEN,IAAK,IACL,IAAK,KACH,OAAOwP,GAAaxP,EAAMhB,OAAQ6P,GAEpC,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,QAEjD,IAAK,MACH,OAAOgH,GACL1Q,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAETW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,QACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,SACPoB,QAAS,eAEb6B,GAGJ,IAAK,QACH,OAAOwP,GACL1Q,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,SACPoB,QAAS,eAEX6B,GAGJ,IAAK,SACH,OAAOwP,GACL1Q,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,QACPoB,QAAS,gBAETW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,SACPoB,QAAS,eAEb6B,GAIJ,QACE,OAAOwP,GACL1Q,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,OACPoB,QAAS,gBAETW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,QACPoB,QAAS,gBAEXW,EAAMgD,IAAIqN,EAAY,CACpBpS,MAAO,SACPoB,QAAS,eAEb6B,GAGR,CAEA,QAAAoO,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,CAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAGhB,OAFAmC,EAAO8T,GAAU9T,EAAMnC,IAClBuJ,SAAS,EAAG,EAAG,EAAG,GAChBpH,CACT,CAEAiU,mBAAqB,CACnB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MlBrBF1J,EAAG,ImBzFE,cAAyBsH,GAC9BxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OACExB,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAIf,IAAK,QACH,OAAOW,EAAMiD,UAAUoN,EAAY,CACjCpS,MAAO,SACPoB,QAAS,eAGb,QACE,OACEW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,OACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAInB,CAEA,GAAAuQ,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAKoH,SAAS0L,GAAqBjV,GAAQ,EAAG,EAAG,GAC1CmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MnB0C/CrH,EAAG,IoB1FE,cAAiCiF,GACtCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OACExB,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAIf,IAAK,QACH,OAAOW,EAAMiD,UAAUoN,EAAY,CACjCpS,MAAO,SACPoB,QAAS,eAGb,QACE,OACEW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,OACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAInB,CAEA,GAAAuQ,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAKoH,SAAS0L,GAAqBjV,GAAQ,EAAG,EAAG,GAC1CmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MpB2C/CnH,EAAG,IqB1FE,cAA8B+E,GACnCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACL,IAAK,KACL,IAAK,MACH,OACExB,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAIf,IAAK,QACH,OAAOW,EAAMiD,UAAUoN,EAAY,CACjCpS,MAAO,SACPoB,QAAS,eAGb,QACE,OACEW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,OACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,cACPoB,QAAS,gBAEXW,EAAMiD,UAAUoN,EAAY,CAC1BpS,MAAO,SACPoB,QAAS,eAInB,CAEA,GAAAuQ,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAKoH,SAAS0L,GAAqBjV,GAAQ,EAAG,EAAG,GAC1CmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,MrB2CrCvJ,EAAG,IsB3FE,cAA8BmH,GACnCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAyBH,GACtD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAChB,MAAMgX,EAAO7U,EAAK6G,YAAc,GAQhC,OAPIgO,GAAQhX,EAAQ,GAClBmC,EAAKoH,SAASvJ,EAAQ,GAAI,EAAG,EAAG,GACtBgX,GAAkB,KAAVhX,EAGlBmC,EAAKoH,SAASvJ,EAAO,EAAG,EAAG,GAF3BmC,EAAKoH,SAAS,EAAG,EAAG,EAAG,GAIlBpH,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,MtB8D1CtJ,EAAG,IuB5FE,cAA8BkH,GACnCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAyBH,GACtD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAKoH,SAASvJ,EAAO,EAAG,EAAG,GACpBmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MvBsEpDlH,EAAG,IwB7FE,cAA8B8E,GACnCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAyBH,GACtD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAOhB,OANamC,EAAK6G,YAAc,IACpBhJ,EAAQ,GAClBmC,EAAKoH,SAASvJ,EAAQ,GAAI,EAAG,EAAG,GAEhCmC,EAAKoH,SAASvJ,EAAO,EAAG,EAAG,GAEtBmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,MxBkE1CjH,EAAG,IyB9FE,cAA8B6E,GACnCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAyBH,GACtD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,SACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAChB,MAAMgP,EAAQhP,GAAS,GAAKA,EAAQ,GAAKA,EAEzC,OADAmC,EAAKoH,SAASyF,EAAO,EAAG,EAAG,GACpB7M,CACT,CAEAiU,mBAAqB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MzBuEpDrJ,EAAG,I0B/FE,cAA2BiH,GAChCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAwBH,GACrD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,WACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAK8U,WAAWjX,EAAO,EAAG,GACnBmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,M1ByE3BpJ,EAAG,I2BhGE,cAA2BgH,GAChCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,EAAOxB,GACvB,OAAQwB,GACN,IAAK,IACH,OAAOqP,GAAoBL,GAAwBH,GACrD,IAAK,KACH,OAAOrQ,EAAMqC,cAAcgO,EAAY,CAAE3G,KAAM,WACjD,QACE,OAAOsH,GAAaxP,EAAMhB,OAAQ6P,GAExC,CAEA,QAAAf,CAASrN,EAAO9F,GACd,OAAOA,GAAS,GAAKA,GAAS,EAChC,CAEA,GAAAyT,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAK+U,WAAWlX,EAAO,GAChBmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,M3B0E3BnJ,EAAG,I4BlGE,cAAqC+G,GAC1CxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,GAGhB,OAAOkP,GAASM,GAAaxP,EAAMhB,OAAQ6P,GAFpBlU,GACrBgI,KAAKoF,MAAMpN,EAAQgI,KAAKC,IAAI,GAAoB,EAAf5C,EAAMhB,SAE3C,CAEA,GAAAoP,CAAItR,EAAMoU,EAAQvW,GAEhB,OADAmC,EAAKgV,gBAAgBnX,GACdmC,CACT,CAEAiU,mBAAqB,CAAC,IAAK,M5BqF3BhH,EAAG,I6B/FE,cAAqC4E,GAC1CxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,GAChB,OAAQA,GACN,IAAK,IACH,OAAOsP,GACLL,GACAJ,GAEJ,IAAK,KACH,OAAOS,GAAqBL,GAAwBJ,GACtD,IAAK,OACH,OAAOS,GACLL,GACAJ,GAEJ,IAAK,QACH,OAAOS,GACLL,GACAJ,GAGJ,QACE,OAAOS,GAAqBL,GAA2BJ,GAE7D,CAEA,GAAAT,CAAItR,EAAMuR,EAAO1T,GACf,OAAI0T,EAAMG,eAAuB1R,EAC1BmG,EACLnG,EACAA,EAAKoJ,UAAY7C,EAAgCvG,GAAQnC,EAE7D,CAEAoW,mBAAqB,CAAC,IAAK,IAAK,M7B4DhC1G,EAAG,I8BhGE,cAAgCsE,GACrCxY,SAAW,GAEX,KAAAsB,CAAMoX,EAAY7O,GAChB,OAAQA,GACN,IAAK,IACH,OAAOsP,GACLL,GACAJ,GAEJ,IAAK,KACH,OAAOS,GAAqBL,GAAwBJ,GACtD,IAAK,OACH,OAAOS,GACLL,GACAJ,GAEJ,IAAK,QACH,OAAOS,GACLL,GACAJ,GAGJ,QACE,OAAOS,GAAqBL,GAA2BJ,GAE7D,CAEA,GAAAT,CAAItR,EAAMuR,EAAO1T,GACf,OAAI0T,EAAMG,eAAuB1R,EAC1BmG,EACLnG,EACAA,EAAKoJ,UAAY7C,EAAgCvG,GAAQnC,EAE7D,CAEAoW,mBAAqB,CAAC,IAAK,IAAK,M9B6DhCtG,EAAG,I+BpGE,cAAqCkE,GAC1CxY,SAAW,GAEX,KAAAsB,CAAMoX,GACJ,OAAOU,GAAqBV,EAC9B,CAEA,GAAAT,CAAItR,EAAMoU,EAAQvW,GAChB,MAAO,CAACsI,EAAcnG,EAAc,IAARnC,GAAe,CAAE6T,gBAAgB,GAC/D,CAEAuC,mBAAqB,K/B0FrBrG,EAAG,IgCrGE,cAA0CiE,GAC/CxY,SAAW,GAEX,KAAAsB,CAAMoX,GACJ,OAAOU,GAAqBV,EAC9B,CAEA,GAAAT,CAAItR,EAAMoU,EAAQvW,GAChB,MAAO,CAACsI,EAAcnG,EAAMnC,GAAQ,CAAE6T,gBAAgB,GACxD,CAEAuC,mBAAqB,MCiBjB,GACJ,wDAII,GAA6B,oCAE7B,GAAsB,eACtB,GAAoB,MAEpBgB,GAAsB,KACtB,GAAgC,WA4S/B,SAASta,GAAMua,EAASpF,EAAWqF,EAAezV,GACvD,MAAM0V,EAAc,IAAMjP,EAAczG,GAASyH,IAAMgO,EAAezB,KAChE/N,EC/TCpD,OAAO8S,OAAO,CAAC,EAAG,KDgUnB5M,EAAS/I,GAAS+I,QAAU9C,EAAe8C,QAAU,EAErD/C,EACJhG,GAASgG,uBACThG,GAAS+I,QAAQ/I,SAASgG,uBAC1BC,EAAeD,uBACfC,EAAe8C,QAAQ/I,SAASgG,uBAChC,EAEID,EACJ/F,GAAS+F,cACT/F,GAAS+I,QAAQ/I,SAAS+F,cAC1BE,EAAeF,cACfE,EAAe8C,QAAQ/I,SAAS+F,cAChC,EAEF,IAAKqK,EACH,OAAOoF,EAAUE,IAAgB/O,EAAO8O,EAAezV,GAASyH,IAElE,MAAMmO,EAAe,CACnB5P,wBACAD,eACAgD,UAKI8M,EAAU,CAAC,IAAI/D,GAAmB9R,GAASyH,GAAIgO,IAE/CK,EAAS1F,EACZpO,MAAM,IACN3G,IAAKkV,IACJ,MAAMC,EAAiBD,EAAU,GACjC,OAAIC,KAAkB9B,IAEb+B,EADe/B,GAAe8B,IAChBD,EAAWxH,EAAO1I,YAElCkQ,IAERG,KAAK,IACL1O,MAAM,IAEH+T,EAAa,GAEnB,IAAK,IAAIvS,KAASsS,EAAQ,EAErB9V,GAASgR,6BACV5B,GAAyB5L,IAEzB6L,GAA0B7L,EAAO4M,EAAWoF,IAG3CxV,GAASiR,8BACV9B,GAA0B3L,IAE1B6L,GAA0B7L,EAAO4M,EAAWoF,GAG9C,MAAMhF,EAAiBhN,EAAM,GACvBwS,EAAS1B,GAAQ9D,GACvB,GAAIwF,EAAQ,CACV,MAAM,mBAAEzB,GAAuByB,EAC/B,GAAI5T,MAAMC,QAAQkS,GAAqB,CACrC,MAAM0B,EAAoBF,EAAW5N,KAClC+N,GACC3B,EAAmBlb,SAAS6c,EAAU1S,QACtC0S,EAAU1S,QAAUgN,GAExB,GAAIyF,EACF,MAAM,IAAIrG,WACR,uCAAuCqG,EAAkBE,qBAAqB3S,uBAGpF,MAAO,GAAkC,MAA9BwS,EAAOzB,oBAA8BwB,EAAWvT,OAAS,EAClE,MAAM,IAAIoN,WACR,uCAAuCpM,4CAI3CuS,EAAWzb,KAAK,CAAEkJ,MAAOgN,EAAgB2F,UAAW3S,IAEpD,MAAMoC,EAAcoQ,EAAO5D,IACzBoD,EACAhS,EACAuF,EAAO/G,MACP4T,GAGF,IAAKhQ,EACH,OAAO8P,IAGTG,EAAQvb,KAAKsL,EAAY0M,QAEzBkD,EAAU5P,EAAYzC,IACxB,KAAO,CACL,GAAIqN,EAAexO,MAAM,IACvB,MAAM,IAAI4N,WACR,iEACEY,EACA,KAYN,GAPc,OAAVhN,EACFA,EAAQ,IACoB,MAAnBgN,IACThN,EAAQ,GAAmBA,IAIE,IAA3BgS,EAAQY,QAAQ5S,GAGlB,OAAOkS,IAFPF,EAAUA,EAAQpS,MAAMI,EAAMhB,OAIlC,CACF,CAGA,GAAIgT,EAAQhT,OAAS,GAAK+S,GAAoB5S,KAAK6S,GACjD,OAAOE,IAGT,MAAMW,EAAwBR,EAC3Bxa,IAAKiX,GAAWA,EAAO3Y,UACvB2c,KAAK,CAACzL,EAAGqC,IAAMA,EAAIrC,GACnB1P,OAAO,CAACxB,EAAUmM,EAAOxD,IAAUA,EAAM8T,QAAQzc,KAAcmM,GAC/DzK,IAAK1B,GACJkc,EACG1a,OAAQmX,GAAWA,EAAO3Y,WAAaA,GACvC2c,KAAK,CAACzL,EAAGqC,IAAMA,EAAEmE,YAAcxG,EAAEwG,cAErChW,IAAKkb,GAAgBA,EAAY,IAEpC,IAAIjW,EAAOqG,EAAO8O,EAAezV,GAASyH,IAE1C,GAAIqI,OAAOxP,GAAO,OAAOoV,IAEzB,MAAM7D,EAAQ,CAAC,EACf,IAAK,MAAMS,KAAU+D,EAAuB,CAC1C,IAAK/D,EAAOhB,SAAShR,EAAMsV,GACzB,OAAOF,IAGT,MAAMhS,EAAS4O,EAAOV,IAAItR,EAAMuR,EAAO+D,GAEnCxT,MAAMC,QAAQqB,IAChBpD,EAAOoD,EAAO,GACdb,OAAO8S,OAAO9D,EAAOnO,EAAO,KAG5BpD,EAAOoD,CAEX,CAEA,OAAOpD,CACT,CAEA,SAAS,GAAmBiP,GAC1B,OAAOA,EAAMvN,MAAM,IAAqB,GAAG4B,QAAQ,GAAmB,IACxE,CEtdO,SAAS7H,GAAIuE,EAAMkW,EAAUxW,GAClC,MAAM,MACJyW,EAAQ,EAAC,OACTC,EAAS,EAAC,MACVC,EAAQ,EAAC,KACTC,EAAO,EAAC,MACRzJ,EAAQ,EAAC,QACToB,EAAU,EAAC,QACXsI,EAAU,GACRL,EAGEvS,EAAQ0C,EAAOrG,EAAMN,GAASyH,IAC9BqP,EACJJ,GAAUD,ECpBP,SAAmBnW,EAAMyT,EAAQ/T,GACtC,MAAMiE,EAAQ0C,EAAOrG,EAAMN,GAASyH,IACpC,GAAIqI,MAAMiE,GAAS,OAAOtN,EAAczG,GAASyH,IAAMnH,EAAM0T,KAC7D,IAAKD,EAEH,OAAO9P,EAET,MAAM8S,EAAa9S,EAAMiD,UAUnB8P,EAAoBvQ,EAAczG,GAASyH,IAAMnH,EAAM2D,EAAMyF,WAGnE,OAFAsN,EAAkBpC,SAAS3Q,EAAMgD,WAAa8M,EAAS,EAAG,GAEtDgD,GADgBC,EAAkB9P,UAI7B8P,GASP/S,EAAM2E,YACJoO,EAAkBhQ,cAClBgQ,EAAkB/P,WAClB8P,GAEK9S,EAEX,CDnBsBgT,CAAUhT,EAAOyS,EAAiB,GAARD,GAAcxS,EAGtDiT,EACJN,GAAQD,EAAQ7C,GAAQgD,EAAgBF,EAAe,EAARD,GAAaG,EAKxDK,EAAyB,KADVN,EAAyB,IADzBtI,EAAkB,GAARpB,IAI/B,OAAO1G,EAAczG,GAASyH,IAAMnH,GAAO4W,EAAeC,EAC5D,CE7CO,SAASC,GAAS9W,EAAM+W,GAC7B,OAAQ1Q,EAAOrG,IAASqG,EAAO0Q,EACjC,CCXA,IAAIC,GAGG,MA2HDC,GAAwB,SAASC,EAAMC,EAAeC,GACxD,MAAMC,EAAcH,EAAKpb,cAAc,eACjCwb,EAAeJ,EAAKpb,cAAc,aACxCub,EAAYE,iBAAiB,QAAS,KAClCJ,MAEJG,EAAaC,iBAAiB,QAAUjL,IACpCA,EAAEkL,iBACFJ,IACAD,KAER,EAsDMM,GAA0B,SAASC,GACrC,MAAMne,EAAY,EAAkC2E,QAAQ3E,UAC5D,GAAKA,EAOE,CACH,MAAMQ,EAAU4d,GAAepe,GAC/BQ,EAAQtB,cAAcif,GzF5JD,SAAS3d,GAClC,MAAMyL,EAAQ7L,EAASwI,UAAWkM,GAAMA,EAAEjW,KAAO2B,EAAQ3B,IACzDuB,EAAS6L,GAASzL,EAClBE,GACJ,CyFyJQ,CAAsBF,GACtB,EAAqC,IACzC,KAZgB,CAChB,MAAM6d,EAAiB,IAAI/f,EAAQ6f,EAAK1f,MAAO0f,EAAKzf,YAChDyf,EAAKxf,MAAOwf,EAAKvf,MACrB,EAAmByf,GACnB,EAAuBA,GACvB,EAAqC,KACrC,EAA8BC,GAAyBD,EAAexf,IACtE,CAOA,EAAkC8F,QAAQ3E,UAAY,EAC1D,EAEMue,GAAuB,SAASJ,GAClC,MAAMK,EAAS,EAA+B7Z,QAAQ9F,GACtD,GAAK2f,EAOE,CACH,MAAM7c,EAAO8c,GAAYD,GACzB7c,EAAKzB,WAAWie,GzFrLE,SAASxc,GAC/B,MAAMsK,EAAQ5L,EAAMuI,UAAWwL,GAAMA,EAAEvV,KAAO8C,EAAK9C,IACnDwB,EAAM4L,GAAStK,EACfhB,GACJ,CyFkLQ,CAAmBgB,GACnB,EAA8B2c,GAAyB3c,EAAK3B,WAChE,KAZa,CzFtLe2B,EyFuLR,IAAI/B,EAAKue,EAAK1f,MAClC0f,EAAKzf,YAAayf,EAAKte,QAASse,EAAKre,SACrCqe,EAAKO,UAAWP,EAAKxf,MAAOwf,EAAKvf,KAAMuf,EAAKne,WzFxL5CK,EAAMI,KAAKkB,GACXhB,IyFyLA,EAAuByd,GAAeD,EAAKne,YAC3C,EAA8Bse,GAAyBH,EAAKne,WAC5D,CzF7LmB,IAAS2B,EyFoM5B,EAA+BgD,QAAQ6Z,OAAS,EACpD,EAIMF,GAA2B,SAASte,GAKtC,OAJwB,IAAmBsB,OACtCK,GACMA,EAAK3B,YAAcA,EAGlC,EAEMoe,GAAiB,SAASvf,GAC5B,OAAO,IAAsByP,KAAM/M,GAASA,EAAK1C,KAAOA,EAC5D,EAEM4f,GAAc,SAASD,GACzB,OAAO,IAAmBlQ,KAAM3M,GAASA,EAAK9C,KAAO2f,EACzD,GzFtP8B,WAC5B,IAAIG,EACJ,IACEA,EAAUC,OAAW,aACrB,MAAM5K,EAAI,mBAIV,OAHA2K,EAAQ9d,QAAQmT,EAAGA,GACnB2K,EAAQE,WAAW7K,GACnB1T,GAAmB,GACZ,CACT,CAAE,MAAOyS,GACP,OACEA,aAAa+L,cACF,uBAAX/L,EAAEgM,MAEFJ,GACmB,IAAnBA,EAAQhW,MAEZ,CACF,EAKQqW,KACA3e,EAAQoB,KAAc,GACtBrB,EAAWc,KAAiB,IyFeN,WAC1B,MAAM4C,EAAwB/B,SAASQ,cAAc,mBAC/C0c,EAAald,SAASQ,cAAc,gBACvBR,SAASQ,cAAc,eACPR,SAASQ,cAAc,gBAC/Byb,iBAAiB,QAAUjL,IAClD,GAAIA,EAAEmM,OAAOC,QAAQ,aAAc,CAC/B,MAAM/e,EAAW,IACXgf,EAAkBH,EAAW1c,cAAc,mBACjD6c,EAAgBpc,UAAY,GAC5B5C,EAASqE,QAASjE,IACd,MAAM6e,EtFtBmB,SAASxb,EAAMhF,GACpD,MAAMwgB,EAAStd,SAASY,cAAc,UAGtC,OAFA0c,EAAO/a,MAAQzF,EACfwgB,EAAOvc,YAAce,EACdwb,CACX,CsFiB+B,CAAwC7e,EAAQ/B,MAAO+B,EAAQ3B,IAC9EugB,EAAgB/c,YAAYgd,KAEZJ,EAAW1c,cAAc,cACjC+c,YAAc,IAAIzS,KAC9BoS,EAAWM,WACf,MAAO,GAAIxM,EAAEmM,OAAOC,QAAQ,aAAc,CACtC,MAAM9e,EAAQ,IACd,IACA,EAAmB,aACnB,EAA8BA,GAC9BjB,QAAQC,IAAIgB,EAChB,MAAM,GAAI0S,EAAEmM,OAAOC,QAAQ,mBAAoB,CAC3C,IACA,EAAmB,iBACnB,IAAI9e,EAAQ,IACZ,MACMmf,EAAqB/J,GADb,IAAI5I,KACuB,cACzCxM,EAAQA,EAAMiB,OAAQK,GACC8T,GAAOrU,GAAMO,EAAK9B,QAAS,aAAc2f,GAAqB,gBAC3DA,GAE1B,EAA8Bnf,EAClC,MAAO,GAAI0S,EAAEmM,OAAOC,QAAQ,kBAAmB,CAC3C,IACA,EAAmB,eACnB,IAAI9e,EAAQ,IACZ,MAAM8G,EAAQ,IAAI0F,KACZ4S,EAAcvd,GAAIiF,EAAO,CAAC4V,KAAK,IACrC1c,EAAQA,EAAMiB,OAAQK,GAEX4b,GADYnc,GAAMO,EAAK9B,QAAS,aAAcsH,GACzBsY,IAEhC,EAA8Bpf,EAClC,MAAO,GAAI0S,EAAEmM,OAAOC,QAAQ,mBAAoB,CAC5C,IACA,EAAmB,gBACnB,IAAI9e,EAAQ,IACZ,MAAM8G,EAAQ,IAAI0F,KACZ6S,EAAexd,GAAIiF,EAAO,CAAC4V,KAAK,KACtC1c,EAAQA,EAAMiB,OAAQK,GAEX4b,GADYnc,GAAMO,EAAK9B,QAAS,aAAcsH,GACzBuY,IAEhC,EAA8Brf,EAClC,IAGqB0B,SAASQ,cAAc,gBAC/Byb,iBAAiB,QAAS,KACvCla,EAAsByb,aAE9B,CAjGII,GAqGc5d,SAAS6d,iBAAiB,QAClCnb,QAASkZ,IACPA,EAAKkC,cAAcV,QAAQ,mBAC3BzB,GAAsBC,EAClB,IAAMA,EAAKkC,cAAcC,QACzB,IAAM5B,GAAwBlV,OAAO+W,YAAY,IAAIC,SAASrC,MAC3DA,EAAKkC,cAAcV,QAAQ,gBAClCzB,GAAsBC,EAClB,IAAMA,EAAKkC,cAAcC,QACzB,IAAMvB,GAAqBvV,OAAO+W,YAAY,IAAIC,SAASrC,MACxDA,EAAKkC,cAAcV,QAAQ,gBACtBzB,GAAsBC,EAC9B,IAAMA,EAAKkC,cAAcC,QACzB,IAAM5B,GAAwBlV,OAAO+W,YAAY,IAAIC,SAASrC,QrF5FrEpZ,EqFoHwCyZ,iBAAiB,QACzDjL,IACG,GAAIA,EAAEmM,OAAOC,QAAQ,gBAAiB,CAClC,MAAMtgB,EAAKkU,EAAEmM,OAAOva,QAAQ3E,UACtBQ,EAAU,IAAsB8N,KAAM/M,GAASA,EAAK1C,KAAOA,GACjE,EAAuB2B,GACvB,EAA4BA,EAAQ3B,IACpC,EAA8Byf,GAAyB9d,EAAQ3B,IACnE,MACK,GAAIkU,EAAEmM,OAAOe,QAAQ,4BAA6B,CACnD,MAAMjgB,EAAY+S,EAAEmM,OAAOe,QAAQ,gBAAgBtb,QAAQ3E,UAC3D,EAA4C,EACxCoe,GAAepe,IAEnB,EAAkC2E,QAAQ3E,UAAYA,EACtD,EAAoCuf,WACxC,IAQSxd,SAASQ,cAAc,cAC/Byb,iBAAiB,QAAUjL,IAChC,GAAIA,EAAEmM,OAAOe,QAAQ,0BACdlN,EAAEmM,OAAOe,QAAQ,sBAAuB,CAC3C,MAAMC,EAAoBnN,EAAEmM,OAAOe,QAAQ,WACrCzB,EAAS0B,EAAkBvb,QAAQ9F,GACnCmB,EAAYkgB,EAAkBvb,QAAQ3E,WzFrD9B,SAASwe,GAC/B,MAAM2B,EAAY9f,EAAMuI,UAAUjH,GAAQA,EAAK9C,KAAO2f,GAClD2B,GAAa,GACb9f,EAAM+f,OAAOD,EAAW,GAE5Bxf,IACAvB,QAAQC,IAAIgB,EAChB,CyF+CY,CAAmBme,GACnB0B,EAAkBG,SAClB,EAA8B/B,GAAyBte,GAC3D,MAAO,GAAI+S,EAAEmM,OAAOe,QAAQ,qBAAsB,CAC9C,MAAMzB,EAASzL,EAAEmM,OAAOe,QAAQ,SAAStb,QAAQ9F,GACjD,EAA4C,EACxC4f,GAAYD,IAEhB,EAA+B7Z,QAAQ9F,GAAK2f,EAC5C,EAAiCe,WACrC,IAlKqB,WACzB,GAAqC,IAAjC,IAAsB5W,OAAc,CACpC,MAAM2X,EARa,IAAIhiB,EAAQ,UAAW,GAAI,GAAI,IASlDmf,GAAgB6C,EAChB,EAAmBA,GACnB,EAA4BA,EAAWzhB,GAC3C,MAAY4e,KACRA,GzFiE8B,WAClCre,QAAQC,IAAIuB,aAAaS,QAAQ,WACjC,IAAIJ,EAAkBL,aAAaS,QAAQ,UAC3C,OAAIJ,EACeb,EAASkO,KAAM/M,GACtBA,EAAK1C,KAAOoC,GAObb,EAASuI,OAAS,EAClBvI,EAAS,GAEb,IACX,CyFjFwB,IAEpB,EAAqC,KACrC,EAAuBqd,IACvB,EAA8Ba,GAAyBb,GAAc5e,IACzE,CAzBI0hB,GACA,EAAqC,I","sources":["webpack://odin-todo/./src/models/projects.js","webpack://odin-todo/./src/models/tasks.js","webpack://odin-todo/./src/storage.js","webpack://odin-todo/./src/utils.js","webpack://odin-todo/./src/views/main.js","webpack://odin-todo/./src/views/modal.js","webpack://odin-todo/./src/views/sidebar.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US/_lib/formatDistance.js","webpack://odin-todo/./node_modules/date-fns/locale/_lib/buildFormatLongFn.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US/_lib/formatLong.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US/_lib/formatRelative.js","webpack://odin-todo/./node_modules/date-fns/locale/_lib/buildLocalizeFn.js","webpack://odin-todo/./node_modules/date-fns/locale/_lib/buildMatchFn.js","webpack://odin-todo/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US/_lib/localize.js","webpack://odin-todo/./node_modules/date-fns/locale/en-US/_lib/match.js","webpack://odin-todo/./node_modules/date-fns/_lib/defaultOptions.js","webpack://odin-todo/./node_modules/date-fns/constants.js","webpack://odin-todo/./node_modules/date-fns/constructFrom.js","webpack://odin-todo/./node_modules/date-fns/toDate.js","webpack://odin-todo/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","webpack://odin-todo/./node_modules/date-fns/startOfDay.js","webpack://odin-todo/./node_modules/date-fns/getDayOfYear.js","webpack://odin-todo/./node_modules/date-fns/differenceInCalendarDays.js","webpack://odin-todo/./node_modules/date-fns/_lib/normalizeDates.js","webpack://odin-todo/./node_modules/date-fns/startOfYear.js","webpack://odin-todo/./node_modules/date-fns/startOfWeek.js","webpack://odin-todo/./node_modules/date-fns/startOfISOWeek.js","webpack://odin-todo/./node_modules/date-fns/getISOWeekYear.js","webpack://odin-todo/./node_modules/date-fns/getISOWeek.js","webpack://odin-todo/./node_modules/date-fns/startOfISOWeekYear.js","webpack://odin-todo/./node_modules/date-fns/getWeekYear.js","webpack://odin-todo/./node_modules/date-fns/getWeek.js","webpack://odin-todo/./node_modules/date-fns/startOfWeekYear.js","webpack://odin-todo/./node_modules/date-fns/_lib/addLeadingZeros.js","webpack://odin-todo/./node_modules/date-fns/_lib/format/lightFormatters.js","webpack://odin-todo/./node_modules/date-fns/_lib/format/formatters.js","webpack://odin-todo/./node_modules/date-fns/_lib/format/longFormatters.js","webpack://odin-todo/./node_modules/date-fns/_lib/protectedTokens.js","webpack://odin-todo/./node_modules/date-fns/isValid.js","webpack://odin-todo/./node_modules/date-fns/isDate.js","webpack://odin-todo/./node_modules/date-fns/format.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/Setter.js","webpack://odin-todo/./node_modules/date-fns/transpose.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/Parser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/constants.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/utils.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/DateParser.js","webpack://odin-todo/./node_modules/date-fns/addDays.js","webpack://odin-todo/./node_modules/date-fns/setDay.js","webpack://odin-todo/./node_modules/date-fns/setISODay.js","webpack://odin-todo/./node_modules/date-fns/getISODay.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/EraParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/YearParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/QuarterParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/MonthParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js","webpack://odin-todo/./node_modules/date-fns/setWeek.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js","webpack://odin-todo/./node_modules/date-fns/setISOWeek.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/DayParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ISODayParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/AMPMParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/MinuteParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/SecondParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js","webpack://odin-todo/./node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js","webpack://odin-todo/./node_modules/date-fns/parse.js","webpack://odin-todo/./node_modules/date-fns/getDefaultOptions.js","webpack://odin-todo/./node_modules/date-fns/add.js","webpack://odin-todo/./node_modules/date-fns/addMonths.js","webpack://odin-todo/./node_modules/date-fns/isBefore.js","webpack://odin-todo/./src/controller.js"],"sourcesContent":["// Projects class\nexport class Project {\n    static EDITABLE_PROPERTIES = ['title', 'description', 'notes', 'tags'];\n    constructor(title, description=\"\", notes=\"\", tags=[], id=null) {\n        this._type = 'project';\n        this.id = id ?? crypto.randomUUID();\n        this.title = title;\n        this.description = description;\n        this.notes = notes;\n        this.tags = tags;\n    }\n\n    updateProject(updates) {\n        console.log(updates);\n        for (const key in updates) {\n            if (Project.EDITABLE_PROPERTIES.includes(key)) {\n                this[key] = updates[key];\n            }\n        }\n    }\n\n    static projectFromJSON(parsedJSONObject) {\n        const project = new Project(parsedJSONObject.title, parsedJSONObject.description,\n            parsedJSONObject.notes, parsedJSONObject.tags, parsedJSONObject.id\n        );\n\n        return project;\n    }\n\n    static retrieveValidProperties() {\n        return this.EDITABLE_PROPERTIES;\n    }\n}\n","// Task class\nexport class Task {\n    static EDITABLE_PROPERTIES = ['project', 'title', 'description', 'dueDate', 'priority', 'checklist', 'notes', 'tags'];\n    constructor(title, description=\"\", dueDate=\"\", priority=0, checklist=[], notes=\"\", tags=[], projectId = 0, id=null) {\n        this._type = \"task\";\n        this.complete = false;\n        this.id = id ?? crypto.randomUUID();\n        this.projectId = projectId;\n        this.title = title;\n        this.description = description;\n        this.dueDate = dueDate;\n        this.priority = priority;\n        this.checklist = checklist;\n        this.notes = notes;\n        this.tags = tags;\n    }\n\n    updateTask(updates) {\n        for (const key in updates) {\n            console.log(updates);\n            if (Task.EDITABLE_PROPERTIES.includes(key)) {\n                this[key] = updates[key];\n            }\n        }\n    }\n\n    static taskFromJSON(parsedJSONObject) {\n        const task = new Task(parsedJSONObject.title, parsedJSONObject.description,\n            parsedJSONObject.dueDate, parsedJSONObject.priority, parsedJSONObject.checklist,\n            parsedJSONObject.notes, parsedJSONObject.tags, parsedJSONObject.projectId, parsedJSONObject.id\n        );\n\n        return task;\n    }\n\n    static retrieveValidProperties() {\n        return this.EDITABLE_PROPERTIES;\n    }\n}\n\n","//This is intended to only read and save task/project data\nimport {Task} from \"./models/tasks.js\";\nimport {Project} from \"./models/projects.js\";\n\nlet projects = [];\nlet tasks = [];\nlet storageAvailable = false;\n\n/* ----------------- Just ensure local storage is available ----------------- */\n\nconst checkStorageAvailable = function(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    storageAvailable = true;\n    return true;\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      e.name === \"QuotaExceededError\" &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/* ---------- Fetch Saved Data When Running App for the First Time ---------- */\n\nexport const initialize = function() {\n    if (checkStorageAvailable(\"localStorage\")) {\n        tasks = getTasks() ?? [];\n        projects = getProjects() ?? [];\n    }\n}\n\n/* - Store New Tasks and Projects Temporarily anprojectId = 0, id=null, fromd then Add to Local Storage - */\n\nexport const addTask = function(task) {\n    tasks.push(task);\n    storeTasks();\n}\n\nexport const addProject = function(project) {\n    projects.push(project);\n    storeProjects();\n}\n\nexport const updateTask = function(task) {\n    const index = tasks.findIndex((t) => t.id === task.id);\n    tasks[index] = task;\n    storeTasks();\n}\n\nexport const updateProject = function(project) {\n    const index = projects.findIndex((p) => p.id === project.id);\n    projects[index] = project;\n    storeProjects();\n}\n\nconst storeTasks = function() {\n    if (storageAvailable) {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    }\n}\n\nconst storeProjects = function() {\n    if (storageAvailable) {\n        localStorage.setItem(\"projects\", JSON.stringify(projects));\n    }\n}\n\nexport const saveActiveProjectId = function(activeProjectId) {\n    if (storageAvailable) {\n        localStorage.setItem(\"active\", activeProjectId);\n    }\n}\n\nexport const getProjects = function() {\n    let projectInformation = JSON.parse(localStorage.getItem(\"projects\"));\n    if (projectInformation) {\n        projectInformation = projectInformation.filter(proj => proj !== null).map((project) => {\n            return Project.projectFromJSON(project);\n        });\n        projects = projectInformation;\n    }\n    return projects;\n}\n\nexport const getTasks = function() {\n    /* This will become an array */\n    let taskInformation = JSON.parse(localStorage.getItem(\"tasks\"));\n    /* Turn them into task objects */\n    if (taskInformation) {\n        taskInformation = taskInformation.filter(task => task !== null).map((task) => {\n            return Task.taskFromJSON(task);\n        });\n        tasks = taskInformation;\n    }\n    return tasks;\n}\n\nexport const getStoredActiveProject = function() {\n    console.log(localStorage.getItem(\"active\"));\n    let activeProjectId = localStorage.getItem(\"active\");\n    if (activeProjectId) {\n        const active = projects.find((proj) => {\n            if (proj.id === activeProjectId) {\n                return true;\n            } else {\n                return false;\n            }\n        });\n        return active;\n    } else if (projects.length > 0) {\n        return projects[0];\n    }\n    return null;\n}\n\nexport const removeProject = function(projectId) {\n    const projIndex = projects.findIndex(proj => proj.id === projectId);\n    if (projIndex >= 0) {\n        projects.splice(projIndex, 1);\n    }\n    storeProjects();\n}\n\nexport const removeTask = function(taskId) {\n    const taskIndex = tasks.findIndex(task => task.id === taskId);\n    if (taskIndex >= 0) {\n        tasks.splice(taskIndex, 1);\n    }\n    storeTasks();\n    console.log(tasks);\n}\n\n","export const createIcon = (iconName) => {\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n  svg.classList.add('icon', `icon-${iconName}`);\n  \n  const use = document.createElementNS('http://www.w3.org/2000/svg', 'use');\n  use.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#icon-${iconName}`);\n  \n  svg.appendChild(use);\n  return svg;\n};","// Creates HTML only to be displayed in the main content/active project area\n\nimport {createIcon} from \"../utils.js\";\n\nconst todoList = document.querySelector(\".todo-list\");\nconst projectContainer = document.querySelector(\".project-container\");\n\nconst renderTask = function (addedTask) {\n    let task = document.createElement('li');\n    task.setAttribute(\"data-id\", addedTask.id);\n    task.setAttribute(\"data-project-id\", addedTask.projectId);\n    task.classList.add('task');\n    let titleNode = document.createElement('h3');\n    titleNode.textContent = addedTask.title;\n\n    const circleCheckButton = document.createElement(\"button\");\n    circleCheckButton.classList.add(\"icon-circle-with-check\");\n    circleCheckButton.classList.add(\"todo-button\");\n    circleCheckButton.classList.add(\"todo-complete-button\");\n    circleCheckButton.innerHTML = `<svg class=\"icon icon-circle-with-check\" viewBox=\"0 0 32 32\" width=\"100%\" height=\"100%\">\n        <path d=\"M16 26.667c-5.891 0-10.667-4.776-10.667-10.667v0c0-5.891 4.776-10.667 10.667-10.667v0c5.891 0 10.667 4.776 10.667 10.667v0c0 5.891-4.776 10.667-10.667 10.667v0zM16 2.667c-7.364 0-13.333 5.97-13.333 13.333v0c0 7.364 5.97 13.333 13.333 13.333v0c7.364 0 13.333-5.97 13.333-13.333v0c0-7.364-5.97-13.333-13.333-13.333v0z\"></path>\n        <path class=\"inner-check\" d=\"M23 11.333l-8 8-3.667-3.667 0.94-0.94 2.727 2.72 7.06-7.053 0.94 0.94z\"></path>\n      </svg>`;\n\n    const leftSide = document.createElement('div');\n\n    leftSide.appendChild(circleCheckButton);\n    leftSide.appendChild(titleNode);\n    leftSide.classList.add(\"task-info\");\n\n    const rightSide = document.createElement('div');\n    const editButton = document.createElement(\"button\");\n    const trashButton = document.createElement(\"button\");\n\n    editButton.classList.add(\"todo-button\");\n    editButton.classList.add(\"todo-edit-button\");\n    trashButton.classList.add(\"todo-button\");\n    trashButton.classList.add(\"todo-trash-button\");\n    const editSvg = createIcon(\"pencil\");\n    const trashSvg = createIcon(\"trash-can-outline\");\n    const dueDate = document.createElement('p');\n    dueDate.classList.add(\"due-date\");\n    dueDate.textContent = addedTask.dueDate;\n\n    editButton.appendChild(editSvg);\n    trashButton.appendChild(trashSvg);\n\n    rightSide.appendChild(dueDate);\n    rightSide.appendChild(editButton);\n    rightSide.appendChild(trashButton);\n    rightSide.classList.add(\"task-utils\");\n    \n    task.appendChild(leftSide);\n    task.appendChild(rightSide);\n    todoList.appendChild(task);\n}\n\nexport const populateTodoListView = function(tasks) {\n    todoList.innerHTML = ''; \n    for (let task of tasks) {\n        renderTask(task);\n    }\n}\n\nexport const renderProject = function (addedProject) {\n    projectContainer.innerHTML = \"\";\n    projectContainer.setAttribute(\"data-id\", addedProject.id);\n\n    const titleNode = document.createElement('h3');\n    titleNode.textContent = addedProject.title;\n\n    const icon = createIcon(\"icon-circle-outline\");\n\n    projectContainer.appendChild(icon);\n    projectContainer.appendChild(titleNode);\n}\n\nexport const clearMainContent = function() {\n    todoList.innerHTML = \"\";\n    projectContainer.innerHTML = \"\";\n}\n\nexport const setHeader = function(text) {\n    const titleNode = document.createElement('h3');\n    titleNode.textContent = text;\n    projectContainer.appendChild(titleNode);\n}","export const projectCreationDialog = document.querySelector(\"#project-dialog\");\nexport const taskCreationDialog = document.querySelector(\"#task-dialog\");\nexport const projectCreationForm = document.querySelector(\"#project-dialog form\");\nexport const taskCreationForm = document.querySelector(\"#task-dialog form\");\n\n// export const showEditModal = function(item, editableFields) {\n//     const modal = document.querySelector('#edit-modal');\n//     const fieldsContainer = document.querySelector('#modal-fields');\n  \n//     fieldsContainer.innerHTML = '';\n  \n//     editableFields.forEach(field => {\n//         fieldsContainer.appendChild(createFieldElement(field, item[field]));\n//     });\n  \n//     modal.showModal();\n//     return modal;\n// }\n\n// const createFieldElement = function(fieldName, value) {\n//   const container = document.createElement('div');\n//   container.className = 'field-group';\n  \n//   const label = document.createElement('label');\n//   label.textContent = fieldName.charAt(0).toUpperCase() + fieldName.slice(1);\n//   label.htmlFor = fieldName;\n  \n//   const input = document.createElement('input');\n//   input.id = fieldName;\n//   input.name = fieldName;\n//   input.value = value || '';\n  \n//   container.append(label, input);\n//   return container;\n// }\n\n//upon submitting using a \"linked option\", FormData Objects will return the object id name\n// but will have their text content as some other text\n// e.g. a user can click on \"orange\", but an id will be submitted instead\nexport const createLinkedOptionElement = function(text, id) {\n    const option = document.createElement(\"option\");\n    option.value = id;\n    option.textContent = text;\n    return option;\n}\n\nexport const fillFormUsingObjectProperties = function(formElement, arbitraryObject) {\n    for (const key in arbitraryObject) {\n        if (formElement.elements[key]) {\n            formElement.elements[key].value = arbitraryObject[key];\n        }\n    }\n}\n","import {createIcon} from \"../utils.js\";\n\nconst sidebarList = document.querySelector(\".sidebar-project-list\");\n\nexport const renderProjectSidebarView = (projects) => {\n    sidebarList.innerHTML = '';\n    projects.forEach(proj => {\n        const tabContainer = document.createElement('li');\n        tabContainer.dataset.projectId = proj.id;\n        tabContainer.classList.add(\"project-tab\");\n        const icon = createIcon(\"format-list-checkbox\");\n\n        const titleNode = document.createElement('h3');\n        titleNode.textContent = proj.title;\n\n        const leftSide = document.createElement(\"div\");\n        leftSide.appendChild(icon);\n        leftSide.appendChild(titleNode);\n        leftSide.classList.add(\"project-tab-left\");\n\n        const rightSide = document.createElement(\"div\");\n        const button = document.createElement(\"button\");\n        button.classList.add(\"todo-button\");\n        button.classList.add(\"project-tab-edit-button\");\n\n        const editIcon = createIcon(\"pencil\");\n        button.appendChild(editIcon);\n        rightSide.appendChild(button);\n        rightSide.classList.add(\"project-tab-right\");\n\n        tabContainer.appendChild(leftSide);\n        tabContainer.appendChild(rightSide);\n        \n        sidebarList.appendChild(tabContainer);\n    });\n};\n\nexport const getProjectListElementContainer = function() {\n  return sidebarList;\n}\n\nexport const setActiveProject = (projectId) => {\n  const active = document.querySelector(`data-${projectId}`);\n  active.classList.add(\"active-project\");\n};\n\nexport const setInactiveProject = (projectId) => {\n  const inactive = document.querySelector(`data-${projectId}`);\n  inactive.classList.remove(\"active-project\");\n}\n\nexport const removeProject = (projectId) => {\n  const removed = document.querySelector(`data-${projectId}`);\n  sidebarList.removeChild(removed);\n};","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.js\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // [TODO] -- I challenge you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // [TODO] -- I challenge you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // [TODO] I challenge you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.js\";\nimport { formatLong } from \"./en-US/_lib/formatLong.js\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.js\";\nimport { localize } from \"./en-US/_lib/localize.js\";\nimport { match } from \"./en-US/_lib/match.js\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.js\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.js\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\nimport { startOfYear } from \"./startOfYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getDayOfYear} function options.\n */\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n\n  const laterTimestamp =\n    +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp =\n    +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","import { constructFrom } from \"../constructFrom.js\";\n\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(\n    null,\n    context || dates.find((date) => typeof date === \"object\"),\n  );\n  return dates.map(normalize);\n}\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfYear} function options.\n */\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date, options) {\n  const date_ = toDate(date, options?.in);\n  date_.setFullYear(date_.getFullYear(), 0, 1);\n  date_.setHours(0, 0, 0, 0);\n  return date_;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date, options?.in);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfISOWeek} function options.\n */\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date, options) {\n  return startOfWeek(date, { ...options, weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeekYear} function options.\n */\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISOWeek} function options.\n */\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - The options\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { getISOWeekYear } from \"./getISOWeekYear.js\";\nimport { startOfISOWeek } from \"./startOfISOWeek.js\";\n\n/**\n * The {@link startOfISOWeekYear} function options.\n */\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date, options) {\n  const year = getISOWeekYear(date, options);\n  const fourthOfJanuary = constructFrom(options?.in || date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date, options?.in);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (+_date >= +startOfNextYear) {\n    return year + 1;\n  } else if (+_date >= +startOfThisYear) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { millisecondsInWeek } from \"./constants.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\nimport { startOfWeekYear } from \"./startOfWeekYear.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\nexport function getWeek(date, options) {\n  const _date = toDate(date, options?.in);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getWeekYear } from \"./getWeekYear.js\";\nimport { startOfWeek } from \"./startOfWeek.js\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(options?.in || date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.js\";\nimport { getISOWeek } from \"../../getISOWeek.js\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.js\";\nimport { getWeek } from \"../../getWeek.js\";\nimport { getWeekYear } from \"../../getWeekYear.js\";\n\nimport { addLeadingZeros } from \"../addLeadingZeros.js\";\nimport { lightFormatters } from \"./lightFormatters.js\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(+date / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    return addLeadingZeros(+date, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","import { isDate } from \"./isDate.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertible into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  return !((!isDate(date) && typeof date !== \"number\") || isNaN(+toDate(date)));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { formatters } from \"./_lib/format/formatters.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { isValid } from \"./isValid.js\";\nimport { toDate } from \"./toDate.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date, options?.in);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n","import { constructFrom } from \"../../constructFrom.js\";\nimport { transpose } from \"../../transpose.js\";\n\nconst TIMEZONE_UNIT_PRIORITY = 10;\n\nexport class Setter {\n  subPriority = 0;\n\n  validate(_utcDate, _options) {\n    return true;\n  }\n}\n\nexport class ValueSetter extends Setter {\n  constructor(\n    value,\n\n    validateValue,\n\n    setValue,\n\n    priority,\n    subPriority,\n  ) {\n    super();\n    this.value = value;\n    this.validateValue = validateValue;\n    this.setValue = setValue;\n    this.priority = priority;\n    if (subPriority) {\n      this.subPriority = subPriority;\n    }\n  }\n\n  validate(date, options) {\n    return this.validateValue(date, this.value, options);\n  }\n\n  set(date, flags, options) {\n    return this.setValue(date, flags, this.value, options);\n  }\n}\n\nexport class DateTimezoneSetter extends Setter {\n  priority = TIMEZONE_UNIT_PRIORITY;\n  subPriority = -1;\n\n  constructor(context, reference) {\n    super();\n    this.context = context || ((date) => constructFrom(reference, date));\n  }\n\n  set(date, flags) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(date, transpose(date, this.context));\n  }\n}\n","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name transpose\n * @category Generic Helpers\n * @summary Transpose the date to the given constructor.\n *\n * @description\n * The function transposes the date to the given constructor. It helps you\n * to transpose the date in the system time zone to say `UTCDate` or any other\n * date extension.\n *\n * @typeParam InputDate - The input `Date` type derived from the passed argument.\n * @typeParam ResultDate - The result `Date` type derived from the passed constructor.\n *\n * @param date - The date to use values from\n * @param constructor - The date constructor to use\n *\n * @returns Date transposed to the given constructor\n *\n * @example\n * // Create July 10, 2022 00:00 in locale time zone\n * const date = new Date(2022, 6, 10)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'\n *\n * @example\n * // Transpose the date to July 10, 2022 00:00 in UTC\n * transpose(date, UTCDate)\n * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'\n */\nexport function transpose(date, constructor) {\n  const date_ = isConstructor(constructor)\n    ? new constructor(0)\n    : constructFrom(constructor, 0);\n  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n  date_.setHours(\n    date.getHours(),\n    date.getMinutes(),\n    date.getSeconds(),\n    date.getMilliseconds(),\n  );\n  return date_;\n}\n\nfunction isConstructor(constructor) {\n  return (\n    typeof constructor === \"function\" &&\n    constructor.prototype?.constructor === constructor\n  );\n}\n\n// Fallback for modularized imports:\nexport default transpose;\n","import { ValueSetter } from \"./Setter.js\";\n\nexport class Parser {\n  run(dateString, token, match, options) {\n    const result = this.parse(dateString, token, match, options);\n    if (!result) {\n      return null;\n    }\n\n    return {\n      setter: new ValueSetter(\n        result.value,\n        this.validate,\n        this.set,\n        this.priority,\n        this.subPriority,\n      ),\n      rest: result.rest,\n    };\n  }\n\n  validate(_utcDate, _value, _options) {\n    return true;\n  }\n}\n","export const numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/, // 0 to 9999, -0 to -9999\n};\n\nexport const timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/,\n};\n","import {\n  millisecondsInHour,\n  millisecondsInMinute,\n  millisecondsInSecond,\n} from \"../../constants.js\";\n\nimport { numericPatterns } from \"./constants.js\";\n\nexport function mapValue(parseFnResult, mapFn) {\n  if (!parseFnResult) {\n    return parseFnResult;\n  }\n\n  return {\n    value: mapFn(parseFnResult.value),\n    rest: parseFnResult.rest,\n  };\n}\n\nexport function parseNumericPattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  return {\n    value: parseInt(matchResult[0], 10),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseTimezonePattern(pattern, dateString) {\n  const matchResult = dateString.match(pattern);\n\n  if (!matchResult) {\n    return null;\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === \"Z\") {\n    return {\n      value: 0,\n      rest: dateString.slice(1),\n    };\n  }\n\n  const sign = matchResult[1] === \"+\" ? 1 : -1;\n  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value:\n      sign *\n      (hours * millisecondsInHour +\n        minutes * millisecondsInMinute +\n        seconds * millisecondsInSecond),\n    rest: dateString.slice(matchResult[0].length),\n  };\n}\n\nexport function parseAnyDigitsSigned(dateString) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);\n}\n\nexport function parseNDigits(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function parseNDigitsSigned(n, dateString) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);\n    default:\n      return parseNumericPattern(new RegExp(\"^-?\\\\d{1,\" + n + \"}\"), dateString);\n  }\n}\n\nexport function dayPeriodEnumToHours(dayPeriod) {\n  switch (dayPeriod) {\n    case \"morning\":\n      return 4;\n    case \"evening\":\n      return 17;\n    case \"pm\":\n    case \"noon\":\n    case \"afternoon\":\n      return 12;\n    case \"am\":\n    case \"midnight\":\n    case \"night\":\n    default:\n      return 0;\n  }\n}\n\nexport function normalizeTwoDigitYear(twoDigitYear, currentYear) {\n  const isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  let result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    const rangeEnd = absCurrentYear + 50;\n    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;\n    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result;\n}\n\nexport function isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [\n  31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31,\n];\n\n// Day of the month\nexport class DateParser extends Parser {\n  priority = 90;\n  subPriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"d\":\n        return parseNumericPattern(numericPatterns.date, dateString);\n      case \"do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    const month = date.getMonth();\n    if (isLeapYear) {\n      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];\n    } else {\n      return value >= 1 && value <= DAYS_IN_MONTH[month];\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setDate(value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n","import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { addDays } from \"./addDays.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setDay} function options.\n */\n\n/**\n * @name setDay\n * @category Weekday Helpers\n * @summary Set the day of the week to the given date.\n *\n * @description\n * Set the day of the week to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the week of the new date\n * @param options - An object with options.\n *\n * @returns The new date with the day of the week set\n *\n * @example\n * // Set week day to Sunday, with the default weekStartsOn of Sunday:\n * const result = setDay(new Date(2014, 8, 1), 0)\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // Set week day to Sunday, with a weekStartsOn of Monday:\n * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setDay(date, day, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const date_ = toDate(date, options?.in);\n  const currentDay = date_.getDay();\n\n  const remainder = day % 7;\n  const dayIndex = (remainder + 7) % 7;\n\n  const delta = 7 - weekStartsOn;\n  const diff =\n    day < 0 || day > 6\n      ? day - ((currentDay + delta) % 7)\n      : ((dayIndex + delta) % 7) - ((currentDay + delta) % 7);\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setDay;\n","import { addDays } from \"./addDays.js\";\nimport { getISODay } from \"./getISODay.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISODay} function options.\n */\n\n/**\n * @name setISODay\n * @category Weekday Helpers\n * @summary Set the day of the ISO week to the given date.\n *\n * @description\n * Set the day of the ISO week to the given date.\n * ISO week starts with Monday.\n * 7 is the index of Sunday, 1 is the index of Monday, etc.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param day - The day of the ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the day of the ISO week set\n *\n * @example\n * // Set Sunday to 1 September 2014:\n * const result = setISODay(new Date(2014, 8, 1), 7)\n * //=> Sun Sep 07 2014 00:00:00\n */\nexport function setISODay(date, day, options) {\n  const date_ = toDate(date, options?.in);\n  const currentDay = getISODay(date_, options);\n  const diff = day - currentDay;\n  return addDays(date_, diff, options);\n}\n\n// Fallback for modularized imports:\nexport default setISODay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link getISODay} function options.\n */\n\n/**\n * @name getISODay\n * @category Weekday Helpers\n * @summary Get the day of the ISO week of the given date.\n *\n * @description\n * Get the day of the ISO week of the given date,\n * which is 7 for Sunday, 1 for Monday etc.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The day of ISO week\n *\n * @example\n * // Which day of the ISO week is 26 February 2012?\n * const result = getISODay(new Date(2012, 1, 26))\n * //=> 7\n */\nexport function getISODay(date, options) {\n  const day = toDate(date, options?.in).getDay();\n  return day === 0 ? 7 : day;\n}\n\n// Fallback for modularized imports:\nexport default getISODay;\n","import { EraParser } from \"./parsers/EraParser.js\";\nimport { YearParser } from \"./parsers/YearParser.js\";\nimport { LocalWeekYearParser } from \"./parsers/LocalWeekYearParser.js\";\nimport { ISOWeekYearParser } from \"./parsers/ISOWeekYearParser.js\";\nimport { ExtendedYearParser } from \"./parsers/ExtendedYearParser.js\";\nimport { QuarterParser } from \"./parsers/QuarterParser.js\";\nimport { StandAloneQuarterParser } from \"./parsers/StandAloneQuarterParser.js\";\nimport { MonthParser } from \"./parsers/MonthParser.js\";\nimport { StandAloneMonthParser } from \"./parsers/StandAloneMonthParser.js\";\nimport { LocalWeekParser } from \"./parsers/LocalWeekParser.js\";\nimport { ISOWeekParser } from \"./parsers/ISOWeekParser.js\";\nimport { DateParser } from \"./parsers/DateParser.js\";\nimport { DayOfYearParser } from \"./parsers/DayOfYearParser.js\";\nimport { DayParser } from \"./parsers/DayParser.js\";\nimport { LocalDayParser } from \"./parsers/LocalDayParser.js\";\nimport { StandAloneLocalDayParser } from \"./parsers/StandAloneLocalDayParser.js\";\nimport { ISODayParser } from \"./parsers/ISODayParser.js\";\nimport { AMPMParser } from \"./parsers/AMPMParser.js\";\nimport { AMPMMidnightParser } from \"./parsers/AMPMMidnightParser.js\";\nimport { DayPeriodParser } from \"./parsers/DayPeriodParser.js\";\nimport { Hour1to12Parser } from \"./parsers/Hour1to12Parser.js\";\nimport { Hour0to23Parser } from \"./parsers/Hour0to23Parser.js\";\nimport { Hour0To11Parser } from \"./parsers/Hour0To11Parser.js\";\nimport { Hour1To24Parser } from \"./parsers/Hour1To24Parser.js\";\nimport { MinuteParser } from \"./parsers/MinuteParser.js\";\nimport { SecondParser } from \"./parsers/SecondParser.js\";\nimport { FractionOfSecondParser } from \"./parsers/FractionOfSecondParser.js\";\nimport { ISOTimezoneWithZParser } from \"./parsers/ISOTimezoneWithZParser.js\";\nimport { ISOTimezoneParser } from \"./parsers/ISOTimezoneParser.js\";\nimport { TimestampSecondsParser } from \"./parsers/TimestampSecondsParser.js\";\nimport { TimestampMillisecondsParser } from \"./parsers/TimestampMillisecondsParser.js\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nexport const parsers = {\n  G: new EraParser(),\n  y: new YearParser(),\n  Y: new LocalWeekYearParser(),\n  R: new ISOWeekYearParser(),\n  u: new ExtendedYearParser(),\n  Q: new QuarterParser(),\n  q: new StandAloneQuarterParser(),\n  M: new MonthParser(),\n  L: new StandAloneMonthParser(),\n  w: new LocalWeekParser(),\n  I: new ISOWeekParser(),\n  d: new DateParser(),\n  D: new DayOfYearParser(),\n  E: new DayParser(),\n  e: new LocalDayParser(),\n  c: new StandAloneLocalDayParser(),\n  i: new ISODayParser(),\n  a: new AMPMParser(),\n  b: new AMPMMidnightParser(),\n  B: new DayPeriodParser(),\n  h: new Hour1to12Parser(),\n  H: new Hour0to23Parser(),\n  K: new Hour0To11Parser(),\n  k: new Hour1To24Parser(),\n  m: new MinuteParser(),\n  s: new SecondParser(),\n  S: new FractionOfSecondParser(),\n  X: new ISOTimezoneWithZParser(),\n  x: new ISOTimezoneParser(),\n  t: new TimestampSecondsParser(),\n  T: new TimestampMillisecondsParser(),\n};\n","import { Parser } from \"../Parser.js\";\n\nexport class EraParser extends Parser {\n  priority = 140;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return (\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n\n      // A, B\n      case \"GGGGG\":\n        return match.era(dateString, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return (\n          match.era(dateString, { width: \"wide\" }) ||\n          match.era(dateString, { width: \"abbreviated\" }) ||\n          match.era(dateString, { width: \"narrow\" })\n        );\n    }\n  }\n\n  set(date, flags, value) {\n    flags.era = value;\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"R\", \"u\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n// | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n// |----------|-------|----|-------|-------|-------|\n// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\nexport class YearParser extends Parser {\n  priority = 130;\n  incompatibleTokens = [\"Y\", \"R\", \"u\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"yy\",\n    });\n\n    switch (token) {\n      case \"y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value) {\n    const currentYear = date.getFullYear();\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(normalizedTwoDigitYear, 0, 1);\n      date.setHours(0, 0, 0, 0);\n      return date;\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { getWeekYear } from \"../../../getWeekYear.js\";\n\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, normalizeTwoDigitYear, parseNDigits } from \"../utils.js\";\n\n// Local week-numbering year\nexport class LocalWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token, match) {\n    const valueCallback = (year) => ({\n      year,\n      isTwoDigitYear: token === \"YY\",\n    });\n\n    switch (token) {\n      case \"Y\":\n        return mapValue(parseNDigits(4, dateString), valueCallback);\n      case \"Yo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"year\",\n          }),\n          valueCallback,\n        );\n      default:\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n    }\n  }\n\n  validate(_date, value) {\n    return value.isTwoDigitYear || value.year > 0;\n  }\n\n  set(date, flags, value, options) {\n    const currentYear = getWeekYear(date, options);\n\n    if (value.isTwoDigitYear) {\n      const normalizedTwoDigitYear = normalizeTwoDigitYear(\n        value.year,\n        currentYear,\n      );\n      date.setFullYear(\n        normalizedTwoDigitYear,\n        0,\n        options.firstWeekContainsDate,\n      );\n      date.setHours(0, 0, 0, 0);\n      return startOfWeek(date, options);\n    }\n\n    const year =\n      !(\"era\" in flags) || flags.era === 1 ? value.year : 1 - value.year;\n    date.setFullYear(year, 0, options.firstWeekContainsDate);\n    date.setHours(0, 0, 0, 0);\n    return startOfWeek(date, options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\n// ISO week-numbering year\nexport class ISOWeekYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"R\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    const firstWeekOfYear = constructFrom(date, 0);\n    firstWeekOfYear.setFullYear(value, 0, 4);\n    firstWeekOfYear.setHours(0, 0, 0, 0);\n    return startOfISOWeek(firstWeekOfYear);\n  }\n\n  incompatibleTokens = [\n    \"G\",\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"Q\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigitsSigned } from \"../utils.js\";\n\nexport class ExtendedYearParser extends Parser {\n  priority = 130;\n\n  parse(dateString, token) {\n    if (token === \"u\") {\n      return parseNDigitsSigned(4, dateString);\n    }\n\n    return parseNDigitsSigned(token.length, dateString);\n  }\n\n  set(date, _flags, value) {\n    date.setFullYear(value, 0, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"G\", \"y\", \"Y\", \"R\", \"w\", \"I\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class QuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n      case \"QQ\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { parseNDigits } from \"../utils.js\";\n\nexport class StandAloneQuarterParser extends Parser {\n  priority = 120;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n      case \"qq\": // 01, 02, 03, 04\n        return parseNDigits(token.length, dateString);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return match.ordinalNumber(dateString, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return (\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return match.quarter(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return (\n          match.quarter(dateString, {\n            width: \"wide\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.quarter(dateString, {\n            width: \"narrow\",\n            context: \"standalone\",\n          })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 4;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth((value - 1) * 3, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MonthParser extends Parser {\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"M\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"MM\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // J, F, ..., D\n      case \"MMMMM\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class StandAloneMonthParser extends Parser {\n  priority = 110;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => value - 1;\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return mapValue(\n          parseNumericPattern(numericPatterns.month, dateString),\n          valueCallback,\n        );\n      // 01, 02, ..., 12\n      case \"LL\":\n        return mapValue(parseNDigits(2, dateString), valueCallback);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"month\",\n          }),\n          valueCallback,\n        );\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return (\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // J, F, ..., D\n      case \"LLLLL\":\n        return match.month(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return (\n          match.month(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.month(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.month(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(value, 1);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"w\",\n    \"I\",\n    \"D\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setWeek } from \"../../../setWeek.js\";\nimport { startOfWeek } from \"../../../startOfWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// Local week of year\nexport class LocalWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"w\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"wo\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value, options) {\n    return startOfWeek(setWeek(date, value, options), options);\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"i\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getWeek } from \"./getWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setWeek} function options.\n */\n\n/**\n * @name setWeek\n * @category Week Helpers\n * @summary Set the local week to the given date.\n *\n * @description\n * Set the local week to the given date, saving the weekday number.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param week - The week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the local week set\n *\n * @example\n * // Set the 1st week to 2 January 2005 with default options:\n * const result = setWeek(new Date(2005, 0, 2), 1)\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // Set the 1st week to 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January:\n * const result = setWeek(new Date(2005, 0, 2), 1, {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Sun Jan 4 2004 00:00:00\n */\nexport function setWeek(date, week, options) {\n  const date_ = toDate(date, options?.in);\n  const diff = getWeek(date_, options) - week;\n  date_.setDate(date_.getDate() - diff * 7);\n  return toDate(date_, options?.in);\n}\n\n// Fallback for modularized imports:\nexport default setWeek;\n","import { setISOWeek } from \"../../../setISOWeek.js\";\nimport { startOfISOWeek } from \"../../../startOfISOWeek.js\";\nimport { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\n// ISO week of year\nexport class ISOWeekParser extends Parser {\n  priority = 100;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"I\":\n        return parseNumericPattern(numericPatterns.week, dateString);\n      case \"Io\":\n        return match.ordinalNumber(dateString, { unit: \"week\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 53;\n  }\n\n  set(date, _flags, value) {\n    return startOfISOWeek(setISOWeek(date, value));\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { getISOWeek } from \"./getISOWeek.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link setISOWeek} function options.\n */\n\n/**\n * @name setISOWeek\n * @category ISO Week Helpers\n * @summary Set the ISO week to the given date.\n *\n * @description\n * Set the ISO week to the given date, saving the weekday number.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The `Date` type of the context function.\n *\n * @param date - The date to be changed\n * @param week - The ISO week of the new date\n * @param options - An object with options\n *\n * @returns The new date with the ISO week set\n *\n * @example\n * // Set the 53rd ISO week to 7 August 2004:\n * const result = setISOWeek(new Date(2004, 7, 7), 53)\n * //=> Sat Jan 01 2005 00:00:00\n */\nexport function setISOWeek(date, week, options) {\n  const _date = toDate(date, options?.in);\n  const diff = getISOWeek(_date, options) - week;\n  _date.setDate(_date.getDate() - diff * 7);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default setISOWeek;\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport {\n  isLeapYearIndex,\n  parseNDigits,\n  parseNumericPattern,\n} from \"../utils.js\";\n\nexport class DayOfYearParser extends Parser {\n  priority = 90;\n\n  subpriority = 1;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"D\":\n      case \"DD\":\n        return parseNumericPattern(numericPatterns.dayOfYear, dateString);\n      case \"Do\":\n        return match.ordinalNumber(dateString, { unit: \"date\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(date, value) {\n    const year = date.getFullYear();\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear) {\n      return value >= 1 && value <= 366;\n    } else {\n      return value >= 1 && value <= 365;\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setMonth(0, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"Y\",\n    \"R\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"I\",\n    \"d\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\n// Day of week\nexport class DayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"EEEEE\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"D\", \"i\", \"e\", \"c\", \"t\", \"T\"];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Local day of week\nexport class LocalDayParser extends Parser {\n  priority = 90;\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"e\":\n      case \"ee\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"eo\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"eee\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // T\n      case \"eeeee\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n\n      // Tuesday\n      case \"eeee\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"formatting\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"formatting\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"formatting\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setDay } from \"../../../setDay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// Stand-alone local day of week\nexport class StandAloneLocalDayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match, options) {\n    const valueCallback = (value) => {\n      // We want here floor instead of trunc, so we get -7 for value 0 instead of 0\n      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n      return ((value + options.weekStartsOn + 6) % 7) + wholeWeekDays;\n    };\n\n    switch (token) {\n      // 3\n      case \"c\":\n      case \"cc\": // 03\n        return mapValue(parseNDigits(token.length, dateString), valueCallback);\n      // 3rd\n      case \"co\":\n        return mapValue(\n          match.ordinalNumber(dateString, {\n            unit: \"day\",\n          }),\n          valueCallback,\n        );\n      // Tue\n      case \"ccc\":\n        return (\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // T\n      case \"ccccc\":\n        return match.day(dateString, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return (\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n\n      // Tuesday\n      case \"cccc\":\n      default:\n        return (\n          match.day(dateString, { width: \"wide\", context: \"standalone\" }) ||\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"standalone\",\n          }) ||\n          match.day(dateString, { width: \"short\", context: \"standalone\" }) ||\n          match.day(dateString, { width: \"narrow\", context: \"standalone\" })\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 6;\n  }\n\n  set(date, _flags, value, options) {\n    date = setDay(date, value, options);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"R\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"I\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"i\",\n    \"e\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { setISODay } from \"../../../setISODay.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\n// ISO day of week\nexport class ISODayParser extends Parser {\n  priority = 90;\n\n  parse(dateString, token, match) {\n    const valueCallback = (value) => {\n      if (value === 0) {\n        return 7;\n      }\n      return value;\n    };\n\n    switch (token) {\n      // 2\n      case \"i\":\n      case \"ii\": // 02\n        return parseNDigits(token.length, dateString);\n      // 2nd\n      case \"io\":\n        return match.ordinalNumber(dateString, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // T\n      case \"iiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          }),\n          valueCallback,\n        );\n      // Tu\n      case \"iiiiii\":\n        return mapValue(\n          match.day(dateString, {\n            width: \"short\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n      // Tuesday\n      case \"iiii\":\n      default:\n        return mapValue(\n          match.day(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n            match.day(dateString, {\n              width: \"abbreviated\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"short\",\n              context: \"formatting\",\n            }) ||\n            match.day(dateString, {\n              width: \"narrow\",\n              context: \"formatting\",\n            }),\n          valueCallback,\n        );\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 7;\n  }\n\n  set(date, _flags, value) {\n    date = setISODay(date, value);\n    date.setHours(0, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\n    \"y\",\n    \"Y\",\n    \"u\",\n    \"q\",\n    \"Q\",\n    \"M\",\n    \"L\",\n    \"w\",\n    \"d\",\n    \"D\",\n    \"E\",\n    \"e\",\n    \"c\",\n    \"t\",\n    \"T\",\n  ];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n      case \"aaa\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"aaaaa\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"b\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\nexport class AMPMMidnightParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n      case \"bbb\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"bbbbb\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"B\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { dayPeriodEnumToHours } from \"../utils.js\";\n\n// in the morning, in the afternoon, in the evening, at night\nexport class DayPeriodParser extends Parser {\n  priority = 80;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return (\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n\n      case \"BBBBB\":\n        return match.dayPeriod(dateString, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return (\n          match.dayPeriod(dateString, {\n            width: \"wide\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          }) ||\n          match.dayPeriod(dateString, {\n            width: \"narrow\",\n            context: \"formatting\",\n          })\n        );\n    }\n  }\n\n  set(date, _flags, value) {\n    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1to12Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"h\":\n        return parseNumericPattern(numericPatterns.hour12h, dateString);\n      case \"ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 12;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else if (!isPM && value === 12) {\n      date.setHours(0, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"H\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0to23Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"H\":\n        return parseNumericPattern(numericPatterns.hour23h, dateString);\n      case \"Ho\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 23;\n  }\n\n  set(date, _flags, value) {\n    date.setHours(value, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"K\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour0To11Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"K\":\n        return parseNumericPattern(numericPatterns.hour11h, dateString);\n      case \"Ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 11;\n  }\n\n  set(date, _flags, value) {\n    const isPM = date.getHours() >= 12;\n    if (isPM && value < 12) {\n      date.setHours(value + 12, 0, 0, 0);\n    } else {\n      date.setHours(value, 0, 0, 0);\n    }\n    return date;\n  }\n\n  incompatibleTokens = [\"h\", \"H\", \"k\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class Hour1To24Parser extends Parser {\n  priority = 70;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"k\":\n        return parseNumericPattern(numericPatterns.hour24h, dateString);\n      case \"ko\":\n        return match.ordinalNumber(dateString, { unit: \"hour\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 1 && value <= 24;\n  }\n\n  set(date, _flags, value) {\n    const hours = value <= 24 ? value % 24 : value;\n    date.setHours(hours, 0, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"a\", \"b\", \"h\", \"H\", \"K\", \"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class MinuteParser extends Parser {\n  priority = 60;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"m\":\n        return parseNumericPattern(numericPatterns.minute, dateString);\n      case \"mo\":\n        return match.ordinalNumber(dateString, { unit: \"minute\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setMinutes(value, 0, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { numericPatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseNDigits, parseNumericPattern } from \"../utils.js\";\n\nexport class SecondParser extends Parser {\n  priority = 50;\n\n  parse(dateString, token, match) {\n    switch (token) {\n      case \"s\":\n        return parseNumericPattern(numericPatterns.second, dateString);\n      case \"so\":\n        return match.ordinalNumber(dateString, { unit: \"second\" });\n      default:\n        return parseNDigits(token.length, dateString);\n    }\n  }\n\n  validate(_date, value) {\n    return value >= 0 && value <= 59;\n  }\n\n  set(date, _flags, value) {\n    date.setSeconds(value, 0);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { Parser } from \"../Parser.js\";\n\nimport { mapValue, parseNDigits } from \"../utils.js\";\n\nexport class FractionOfSecondParser extends Parser {\n  priority = 30;\n\n  parse(dateString, token) {\n    const valueCallback = (value) =>\n      Math.trunc(value * Math.pow(10, -token.length + 3));\n    return mapValue(parseNDigits(token.length, dateString), valueCallback);\n  }\n\n  set(date, _flags, value) {\n    date.setMilliseconds(value);\n    return date;\n  }\n\n  incompatibleTokens = [\"t\", \"T\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601. +00:00 is `'Z'`)\nexport class ISOTimezoneWithZParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"X\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"XX\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"XXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"XXXXX\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"XXX\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"x\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"../../../_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { timezonePatterns } from \"../constants.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseTimezonePattern } from \"../utils.js\";\n\n// Timezone (ISO-8601)\nexport class ISOTimezoneParser extends Parser {\n  priority = 10;\n\n  parse(dateString, token) {\n    switch (token) {\n      case \"x\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalMinutes,\n          dateString,\n        );\n      case \"xx\":\n        return parseTimezonePattern(timezonePatterns.basic, dateString);\n      case \"xxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.basicOptionalSeconds,\n          dateString,\n        );\n      case \"xxxxx\":\n        return parseTimezonePattern(\n          timezonePatterns.extendedOptionalSeconds,\n          dateString,\n        );\n      case \"xxx\":\n      default:\n        return parseTimezonePattern(timezonePatterns.extended, dateString);\n    }\n  }\n\n  set(date, flags, value) {\n    if (flags.timestampIsSet) return date;\n    return constructFrom(\n      date,\n      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value,\n    );\n  }\n\n  incompatibleTokens = [\"t\", \"T\", \"X\"];\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampSecondsParser extends Parser {\n  priority = 40;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value * 1000), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { constructFrom } from \"../../../constructFrom.js\";\nimport { Parser } from \"../Parser.js\";\n\nimport { parseAnyDigitsSigned } from \"../utils.js\";\n\nexport class TimestampMillisecondsParser extends Parser {\n  priority = 20;\n\n  parse(dateString) {\n    return parseAnyDigitsSigned(dateString);\n  }\n\n  set(date, _flags, value) {\n    return [constructFrom(date, value), { timestampIsSet: true }];\n  }\n\n  incompatibleTokens = \"*\";\n}\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { longFormatters } from \"./_lib/format/longFormatters.js\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { getDefaultOptions } from \"./getDefaultOptions.js\";\nimport { toDate } from \"./toDate.js\";\n\nimport { DateTimezoneSetter } from \"./parse/_lib/Setter.js\";\nimport { parsers } from \"./parse/_lib/parsers.js\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { longFormatters, parsers };\n\n/**\n * The {@link parse} function options.\n */\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\n\nconst notWhitespaceRegExp = /\\S/;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 001, ..., 999                |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangeably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)\n *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 7. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param dateStr - The string to parse\n * @param formatStr - The string of tokens\n * @param referenceDate - defines values missing from the parsed dateString\n * @param options - An object with options.\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @returns The parsed date\n *\n * @throws `options.locale` must contain `match` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\nexport function parse(dateStr, formatStr, referenceDate, options) {\n  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  if (!formatStr)\n    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);\n\n  const subFnOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  // If timezone isn't specified, it will try to use the context or\n  // the reference date and fallback to the system time zone.\n  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];\n\n  const tokens = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter in longFormatters) {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp);\n\n  const usedTokens = [];\n\n  for (let token of tokens) {\n    if (\n      !options?.useAdditionalWeekYearTokens &&\n      isProtectedWeekYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n    if (\n      !options?.useAdditionalDayOfYearTokens &&\n      isProtectedDayOfYearToken(token)\n    ) {\n      warnOrThrowProtectedError(token, formatStr, dateStr);\n    }\n\n    const firstCharacter = token[0];\n    const parser = parsers[firstCharacter];\n    if (parser) {\n      const { incompatibleTokens } = parser;\n      if (Array.isArray(incompatibleTokens)) {\n        const incompatibleToken = usedTokens.find(\n          (usedToken) =>\n            incompatibleTokens.includes(usedToken.token) ||\n            usedToken.token === firstCharacter,\n        );\n        if (incompatibleToken) {\n          throw new RangeError(\n            `The format string mustn't contain \\`${incompatibleToken.fullToken}\\` and \\`${token}\\` at the same time`,\n          );\n        }\n      } else if (parser.incompatibleTokens === \"*\" && usedTokens.length > 0) {\n        throw new RangeError(\n          `The format string mustn't contain \\`${token}\\` and any other token at the same time`,\n        );\n      }\n\n      usedTokens.push({ token: firstCharacter, fullToken: token });\n\n      const parseResult = parser.run(\n        dateStr,\n        token,\n        locale.match,\n        subFnOptions,\n      );\n\n      if (!parseResult) {\n        return invalidDate();\n      }\n\n      setters.push(parseResult.setter);\n\n      dateStr = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateStr.indexOf(token) === 0) {\n        dateStr = dateStr.slice(token.length);\n      } else {\n        return invalidDate();\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {\n    return invalidDate();\n  }\n\n  const uniquePrioritySetters = setters\n    .map((setter) => setter.priority)\n    .sort((a, b) => b - a)\n    .filter((priority, index, array) => array.indexOf(priority) === index)\n    .map((priority) =>\n      setters\n        .filter((setter) => setter.priority === priority)\n        .sort((a, b) => b.subPriority - a.subPriority),\n    )\n    .map((setterArray) => setterArray[0]);\n\n  let date = toDate(referenceDate, options?.in);\n\n  if (isNaN(+date)) return invalidDate();\n\n  const flags = {};\n  for (const setter of uniquePrioritySetters) {\n    if (!setter.validate(date, subFnOptions)) {\n      return invalidDate();\n    }\n\n    const result = setter.set(date, flags, subFnOptions);\n    // Result is tuple (date, flags)\n    if (Array.isArray(result)) {\n      date = result[0];\n      Object.assign(flags, result[1]);\n      // Result is date\n    } else {\n      date = result;\n    }\n  }\n\n  return date;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default parse;\n","import { getDefaultOptions as getInternalDefaultOptions } from \"./_lib/defaultOptions.js\";\n\n/**\n * @name getDefaultOptions\n * @category Common Helpers\n * @summary Get default options.\n * @pure false\n *\n * @description\n * Returns an object that contains defaults for\n * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`\n * arguments for all functions.\n *\n * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).\n *\n * @returns The default options\n *\n * @example\n * const result = getDefaultOptions()\n * //=> {}\n *\n * @example\n * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })\n * const result = getDefaultOptions()\n * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }\n */\nexport function getDefaultOptions() {\n  return Object.assign({}, getInternalDefaultOptions());\n}\n\n// Fallback for modularized imports:\nexport default getDefaultOptions;\n","import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link add} function options.\n */\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport function add(date, duration, options) {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n  } = duration;\n\n  // Add years and months\n  const _date = toDate(date, options?.in);\n  const dateWithMonths =\n    months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  const dateWithDays =\n    days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  const minutesToAdd = minutes + hours * 60;\n  const secondsToAdd = seconds + minutesToAdd * 60;\n  const msToAdd = secondsToAdd * 1000;\n\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;\n","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param date - The date that should be before the other one to return true\n * @param dateToCompare - The date to compare with\n *\n * @returns The first date is before the second date\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\nexport function isBefore(date, dateToCompare) {\n  return +toDate(date) < +toDate(dateToCompare);\n}\n\n// Fallback for modularized imports:\nexport default isBefore;\n","// All real logic contained in this module.\n// This module uses the others to get its work done.\nimport {Project} from \"./models/projects.js\";\nimport {Task} from \"./models/tasks.js\";\nimport * as storage from \"./storage.js\";\n\nimport * as mainView from \"./views/main.js\";\nimport * as editModalView from \"./views/modal.js\";\nimport * as sidebarView from \"./views/sidebar.js\";\nimport {parse, add, format, isBefore, compareAsc, compareDsc, differenceInDays} from \"date-fns\";\n\nlet activeProject;\n\n// Inject all Handlers and Load All User Info\nexport const initializeApp = function () {\n    storage.initialize();\n    attachSidebarHandlers();\n    attachFormButtonHandlers();\n    attachProjectListTabsHandler();\n    attachTaskButtonHandler();\n    displayActiveProject();\n    sidebarView.renderProjectSidebarView(storage.getProjects());\n}\n\n/* -------------------------- Default Project Setup ------------------------- */\n\nconst createDefaultProject = function() {\n    const defaultProject = new Project('Default', '', '', '');\n    return defaultProject;\n}\n\n// Remember the User's Last Active Project and Render It\n\nconst displayActiveProject = function() {\n    if (storage.getProjects().length === 0) {\n        const defProject = createDefaultProject();\n        activeProject = defProject;\n        storage.addProject(defProject);\n        storage.saveActiveProjectId(defProject.id);\n    } else if (!activeProject) {\n        activeProject = storage.getStoredActiveProject();\n    }\n    sidebarView.renderProjectSidebarView(storage.getProjects());\n    mainView.renderProject(activeProject);\n    mainView.populateTodoListView(getRelevantTasksByProjId(activeProject.id));\n}\n\n/* ----------------------- Sidebar EventHandler Setup ----------------------- */\n\n// Add Event Listeners to Every Sidebar Button\nconst attachSidebarHandlers = function() {\n    const projectCreationDialog = document.querySelector(\"#project-dialog\");\n    const taskDialog = document.querySelector(\"#task-dialog\");\n    const editDialog = document.querySelector(\"#edit-modal\");\n    const sidebarTopButtonsContainer = document.querySelector(\".sidebar-top\");\n    sidebarTopButtonsContainer.addEventListener('click', (e) => {\n        if (e.target.matches(\".add-task\")) {\n            const projects = storage.getProjects();\n            const projectSelector = taskDialog.querySelector(\"#project-select\");\n            projectSelector.innerHTML = \"\";\n            projects.forEach((project) => {\n                const option = editModalView.createLinkedOptionElement(project.title, project.id);\n                projectSelector.appendChild(option);\n            })\n            const dateElement = taskDialog.querySelector(\"input#date\");\n            dateElement.valueAsDate = new Date();\n            taskDialog.showModal();\n        } else if (e.target.matches(\".view-all\")) {\n            const tasks = storage.getTasks();\n            mainView.clearMainContent();\n            mainView.setHeader(\"All Tasks\");\n            mainView.populateTodoListView(tasks);\n            console.log(tasks);\n        }else if (e.target.matches(\".calendar-today\")) {\n            mainView.clearMainContent();\n            mainView.setHeader(\"Today's Tasks\");\n            let tasks = storage.getTasks();\n            const today = new Date();\n            const formattedTodayDate = format(today, \"yyyy-MM-dd\");\n            tasks = tasks.filter((task) => {\n                const parsedDate = format(parse(task.dueDate, \"yyyy-MM-dd\", formattedTodayDate), \"yyyy-MM-dd\");\n                return parsedDate === formattedTodayDate;\n            })\n            mainView.populateTodoListView(tasks);\n        } else if (e.target.matches(\".calendar-week\")) {\n            mainView.clearMainContent();\n            mainView.setHeader(\"Next 7 Days\");\n            let tasks = storage.getTasks();\n            const today = new Date();\n            const weekFromNow = add(today, {days:7});\n            tasks = tasks.filter((task) => {\n                const parsedDate = parse(task.dueDate, \"yyyy-MM-dd\", today);\n                return isBefore(parsedDate, weekFromNow);\n            })\n            mainView.populateTodoListView(tasks);\n        } else if (e.target.matches(\".calendar-month\")) {\n            mainView.clearMainContent();\n            mainView.setHeader(\"Next 30 Days\");\n            let tasks = storage.getTasks();\n            const today = new Date();\n            const monthFromNow = add(today, {days:30});\n            tasks = tasks.filter((task) => {\n                const parsedDate = parse(task.dueDate, \"yyyy-MM-dd\", today);\n                return isBefore(parsedDate, monthFromNow);\n            })\n            mainView.populateTodoListView(tasks);\n        }\n    })\n\n    const addProjectButton = document.querySelector(\".add-project\");\n    addProjectButton.addEventListener('click', () => {\n        projectCreationDialog.showModal();\n    })\n}\n\n// Add Proper Close and Save Handlers to Every Form in the HTML\nconst attachFormButtonHandlers = function() {\n    const forms = document.querySelectorAll(\"form\");\n    forms.forEach((form) => {\n        if (form.parentElement.matches(\"#project-dialog\")) {\n            addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleProjectSubmission(Object.fromEntries(new FormData(form))));\n        } else if (form.parentElement.matches(\"#task-dialog\")) {\n            addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleTaskSubmission(Object.fromEntries(new FormData(form))));\n        } else if (form.parentElement.matches(\"#edit-modal\")) {\n                        addFormButtonHandlers(form,\n                () => form.parentElement.close(),\n                () => handleProjectSubmission(Object.fromEntries(new FormData(form))));\n        }\n    })\n}\n\n// Add Given Functions to the Cancel and Submit Buttons\n\nconst addFormButtonHandlers = function(form, closeCallBack, submitCallback) {\n    const closeButton = form.querySelector(\".cancel-btn\");\n    const submitButton = form.querySelector(\".save-btn\");\n    closeButton.addEventListener(\"click\", () => {\n        closeCallBack();\n    })\n    submitButton.addEventListener(\"click\", (e) => {\n        e.preventDefault();\n        submitCallback();\n        closeCallBack();\n    })\n}\n\n// Setup Event Handler for Entire List of Projects, so User Can Choose\n// Their Desired Active Project\n\nconst attachProjectListTabsHandler = function() {\n    sidebarView.getProjectListElementContainer().addEventListener(\"click\",\n        (e) => {\n            if (e.target.matches(\".project-tab\")) {\n                const id = e.target.dataset.projectId;\n                const project = storage.getProjects().find((proj) => proj.id === id);\n                mainView.renderProject(project);\n                storage.saveActiveProjectId(project.id);\n                mainView.populateTodoListView(getRelevantTasksByProjId(project.id));\n            }\n            else if (e.target.closest(\".project-tab-edit-button\")) {\n                const projectId = e.target.closest(\".project-tab\").dataset.projectId;\n                editModalView.fillFormUsingObjectProperties(editModalView.projectCreationForm,\n                    getProjectById(projectId));\n\n                editModalView.projectCreationForm.dataset.projectId = projectId;\n                editModalView.projectCreationDialog.showModal();\n            }\n        }\n    )\n}\n\n/* ---------------------- Handle Todo List Task Buttons --------------------- */\n\nconst attachTaskButtonHandler = function() {\n    const todoList = document.querySelector(\".todo-list\");\n    todoList.addEventListener('click', (e) => {\n        if (e.target.closest(\".todo-complete-button\")\n            || e.target.closest(\".todo-trash-button\")) {\n            const entireTaskElement = e.target.closest(\"li.task\");\n            const taskId = entireTaskElement.dataset.id;\n            const projectId = entireTaskElement.dataset.projectId;\n            storage.removeTask(taskId);\n            entireTaskElement.remove();\n            mainView.populateTodoListView(getRelevantTasksByProjId(projectId));\n        } else if (e.target.closest(\".todo-edit-button\")) {\n            const taskId = e.target.closest(\".task\").dataset.id;\n            editModalView.fillFormUsingObjectProperties(editModalView.taskCreationForm,\n                getTaskById(taskId));\n\n            editModalView.taskCreationForm.dataset.id = taskId;\n            editModalView.taskCreationDialog.showModal();\n        }\n    });\n}\n\n/* ------------------- Add Task/Project Callback Functions ------------------ */\n\n//Pretty self-explanatory, but creates and saves projects, renders if necessary\nconst handleProjectSubmission = function(data) {\n    const projectId = editModalView.projectCreationForm.dataset.projectId;\n    if (!projectId) {\n    const projectRequest = new Project(data.title, data.description,\n        data.notes, data.tags);\n    storage.addProject(projectRequest);\n    mainView.renderProject(projectRequest);\n    sidebarView.renderProjectSidebarView(storage.getProjects());\n    mainView.populateTodoListView(getRelevantTasksByProjId(projectRequest.id));\n    } else {\n        const project = getProjectById(projectId);\n        project.updateProject(data);\n        storage.updateProject(project);\n        sidebarView.renderProjectSidebarView(storage.getProjects());\n    }\n\n    editModalView.projectCreationForm.dataset.projectId = \"\";\n}\n\nconst handleTaskSubmission = function(data) {\n    const taskId = editModalView.taskCreationForm.dataset.id;\n    if (!taskId) {\n    const taskRequest = new Task(data.title,\n    data.description, data.dueDate, data.priority,\n    data.checkList, data.notes, data.tags, data.projectId);\n    storage.addTask(taskRequest);\n    mainView.renderProject(getProjectById(data.projectId));\n    mainView.populateTodoListView(getRelevantTasksByProjId(data.projectId));\n    } else {\n        const task = getTaskById(taskId);\n        task.updateTask(data);\n        storage.updateTask(task);\n        mainView.populateTodoListView(getRelevantTasksByProjId(task.projectId));\n    }\n\n    editModalView.taskCreationForm.dataset.taskId = \"\";\n}\n\n/* ---------------------------------- Misc ---------------------------------- */\n\nconst getRelevantTasksByProjId = function(projectId) {\n    const associatedTasks = storage.getTasks().filter(\n        (task) => {\n        return task.projectId === projectId;})\n\n    return associatedTasks;\n}\n\nconst getProjectById = function(id) {\n    return storage.getProjects().find((proj) => proj.id === id);\n}\n\nconst getTaskById = function(taskId) {\n    return storage.getTasks().find((task) => task.id === taskId);\n}"],"names":["Project","static","constructor","title","description","notes","tags","id","this","_type","crypto","randomUUID","updateProject","updates","console","log","key","EDITABLE_PROPERTIES","includes","projectFromJSON","parsedJSONObject","retrieveValidProperties","Task","dueDate","priority","checklist","projectId","complete","updateTask","taskFromJSON","projects","tasks","storageAvailable","addProject","project","push","storeProjects","storeTasks","localStorage","setItem","JSON","stringify","saveActiveProjectId","activeProjectId","getProjects","projectInformation","parse","getItem","filter","proj","map","getTasks","taskInformation","task","createIcon","iconName","svg","document","createElementNS","classList","add","use","setAttributeNS","appendChild","todoList","querySelector","projectContainer","renderTask","addedTask","createElement","setAttribute","titleNode","textContent","circleCheckButton","innerHTML","leftSide","rightSide","editButton","trashButton","editSvg","trashSvg","populateTodoListView","renderProject","addedProject","icon","clearMainContent","setHeader","text","projectCreationDialog","taskCreationDialog","projectCreationForm","taskCreationForm","fillFormUsingObjectProperties","formElement","arbitraryObject","elements","value","sidebarList","renderProjectSidebarView","forEach","tabContainer","dataset","button","editIcon","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","options","width","String","defaultWidth","formats","formatLong","date","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","Array","isArray","array","predicate","length","findIndex","pattern","test","object","Object","prototype","hasOwnProperty","call","findKey","valueCallback","rest","slice","enUS","code","formatDistance","token","count","result","tokenValue","replace","toString","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseInt","parseResult","any","index","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","Math","pow","millisecondsInWeek","constructFromSymbol","Symbol","for","constructFrom","Date","toDate","argument","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","in","setHours","getDayOfYear","laterDate","earlierDate","laterDate_","earlierDate_","dates","normalize","bind","find","normalizeDates","laterStartOfDay","earlierStartOfDay","laterTimestamp","earlierTimestamp","round","differenceInCalendarDays","date_","setFullYear","startOfYear","startOfWeek","locale","getDay","diff","setDate","startOfISOWeek","getISOWeekYear","year","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","getTime","getISOWeek","fourthOfJanuary","startOfISOWeekYear","getWeekYear","firstWeekOfNextYear","firstWeekOfThisYear","getWeek","firstWeek","startOfWeekYear","addLeadingZeros","targetLength","abs","padStart","lightFormatters","y","signedYear","M","d","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","week","I","isoWeek","D","dayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","hours","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","offset","delimiter","sign","absOffset","minutes","dateLongFormatter","timeLongFormatter","longFormatters","p","P","datePattern","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isProtectedDayOfYearToken","isProtectedWeekYearToken","warnOrThrowProtectedError","format","input","_message","subject","message","warn","RangeError","isValid","isNaN","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","originalDate","parts","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","formatter","matched","Setter","subPriority","validate","_utcDate","ValueSetter","validateValue","setValue","super","set","flags","DateTimezoneSetter","reference","timestampIsSet","isConstructor","transpose","Parser","run","dateString","setter","_value","numericPatterns","timezonePatterns","mapValue","parseFnResult","mapFn","parseNumericPattern","parseTimezonePattern","parseAnyDigitsSigned","parseNDigits","n","RegExp","parseNDigitsSigned","dayPeriodEnumToHours","normalizeTwoDigitYear","twoDigitYear","currentYear","isCommonEra","absCurrentYear","rangeEnd","isLeapYearIndex","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","addDays","amount","NaN","setDay","currentDay","delta","setISODay","getISODay","parsers","incompatibleTokens","isTwoDigitYear","normalizedTwoDigitYear","_flags","firstWeekOfYear","setMonth","setWeek","setISOWeek","isLeapYear","subpriority","wholeWeekDays","floor","isPM","setMinutes","setSeconds","setMilliseconds","notWhitespaceRegExp","dateStr","referenceDate","invalidDate","assign","subFnOptions","setters","tokens","usedTokens","parser","incompatibleToken","usedToken","fullToken","indexOf","uniquePrioritySetters","sort","setterArray","duration","years","months","weeks","days","seconds","dateWithMonths","dayOfMonth","endOfDesiredMonth","addMonths","dateWithDays","msToAdd","isBefore","dateToCompare","activeProject","addFormButtonHandlers","form","closeCallBack","submitCallback","closeButton","submitButton","addEventListener","preventDefault","handleProjectSubmission","data","getProjectById","projectRequest","getRelevantTasksByProjId","handleTaskSubmission","taskId","getTaskById","checkList","storage","window","removeItem","DOMException","name","checkStorageAvailable","taskDialog","target","matches","projectSelector","option","valueAsDate","showModal","formattedTodayDate","weekFromNow","monthFromNow","attachSidebarHandlers","querySelectorAll","parentElement","close","fromEntries","FormData","closest","entireTaskElement","taskIndex","splice","remove","defProject","displayActiveProject"],"sourceRoot":""}